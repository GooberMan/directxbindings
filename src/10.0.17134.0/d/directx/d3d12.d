// Based on DirectX 12 from Windows 10 kit 10.0.17134.0
module directx.d3d12;

version (Windows) { version = D3D12Enable; }
else { static assert( false, "D3D12 is only enabled for Windows." ); }

version( D3D12Enable ):
@system:
extern( C ):

import combindings;

public import directx.dxgicommon;
public import directx.dxgiformat;
public import directx.d3dcommon;

enum D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff;
enum D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff;
enum D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 0xff;
enum D3D12_APPEND_ALIGNED_ELEMENT = 0xffffffff;
enum D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
enum D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
enum D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
enum D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
enum D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
enum D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
enum D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
enum D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
enum D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
enum D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
enum D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
enum D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
enum D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
enum D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
enum D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
enum D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
enum D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
enum D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
enum D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
enum D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
enum D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
enum D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
enum D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
enum D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
enum D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
enum D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
enum D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
enum D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
enum D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
enum D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
enum D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
enum D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
enum D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
enum D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
enum D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
enum D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
enum D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
enum D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
enum D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
enum D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
enum D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
enum D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
enum D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
enum D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
enum D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
enum D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
enum D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
enum D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
enum D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
enum D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
enum D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
enum D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
enum D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
enum D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
enum D3D12_CS_TGSM_REGISTER_COUNT = 8192;
enum D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
enum D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
enum D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
enum D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
enum D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
enum D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
enum D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
enum D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
enum D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
enum D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
enum D3D12_CS_THREADID_REGISTER_COUNT = 1;
enum D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
enum D3D12_CS_THREAD_GROUP_MAX_X = 1024;
enum D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
enum D3D12_CS_THREAD_GROUP_MAX_Z = 64;
enum D3D12_CS_THREAD_GROUP_MIN_X = 1;
enum D3D12_CS_THREAD_GROUP_MIN_Y = 1;
enum D3D12_CS_THREAD_GROUP_MIN_Z = 1;
enum D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
enum D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1.0f;
enum D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1.0f;
enum D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1.0f;
enum D3D12_DEFAULT_BLEND_FACTOR_RED = 1.0f;
enum D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0.0f;
enum D3D12_DEFAULT_DEPTH_BIAS = 0;
enum D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0.0f;
enum D3D12_DEFAULT_MAX_ANISOTROPY = 16;
enum D3D12_DEFAULT_MIP_LOD_BIAS = 0.0f;
enum D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
enum D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
enum D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
enum D3D12_DEFAULT_SAMPLE_MASK = 0xffffffff;
enum D3D12_DEFAULT_SCISSOR_ENDX = 0;
enum D3D12_DEFAULT_SCISSOR_ENDY = 0;
enum D3D12_DEFAULT_SCISSOR_STARTX = 0;
enum D3D12_DEFAULT_SCISSOR_STARTY = 0;
enum D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0f;
enum D3D12_DEFAULT_STENCIL_READ_MASK = 0xff;
enum D3D12_DEFAULT_STENCIL_REFERENCE = 0;
enum D3D12_DEFAULT_STENCIL_WRITE_MASK = 0xff;
enum D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
enum D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
enum D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0f;
enum D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0f;
enum D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
enum D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
enum D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
enum D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 0xffffffff;
enum D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 0xfffffff7;
enum D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff0;
enum D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
enum D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6;
enum D3D12_FLOAT32_MAX = 3.402823466e+38f;
enum D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f;
enum D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4f;
enum D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1.0f;
enum D3D12_FLOAT_TO_SRGB_OFFSET = 0.055f;
enum D3D12_FLOAT_TO_SRGB_SCALE_1 = 12.92f;
enum D3D12_FLOAT_TO_SRGB_SCALE_2 = 1.055f;
enum D3D12_FLOAT_TO_SRGB_THRESHOLD = 0.0031308f;
enum D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999f;
enum D3D12_FTOI_INSTRUCTION_MIN_INPUT = -2147483648.999f;
enum D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999f;
enum D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0.0f;
enum D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
enum D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
enum D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
enum D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
enum D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_GS_INPUT_REGISTER_COUNT = 32;
enum D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
enum D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
enum D3D12_GS_INPUT_REGISTER_VERTICES = 32;
enum D3D12_GS_MAX_INSTANCE_COUNT = 32;
enum D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
enum D3D12_GS_OUTPUT_ELEMENTS = 32;
enum D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
enum D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
enum D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
enum D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff;
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff;
enum D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0f;
enum D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0f;
enum D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
enum D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
enum D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
enum D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
enum D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
enum D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
enum D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
enum D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
enum D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
enum D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
enum D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
enum D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
enum D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
enum D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff;
enum D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff;
enum D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff;
enum D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff;
enum D3D12_LINEAR_GAMMA = 1.0f;
enum D3D12_MAJOR_VERSION = 12;
enum D3D12_MAX_BORDER_COLOR_COMPONENT = 1.0f;
enum D3D12_MAX_DEPTH = 1.0f;
enum D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
enum D3D12_MAX_MAXANISOTROPY = 16;
enum D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
enum D3D12_MAX_POSITION_VALUE = 3.402823466e+34f;
enum D3D12_MAX_ROOT_COST = 64;
enum D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000;
enum D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000;
enum D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
enum D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
enum D3D12_MAX_VIEW_INSTANCE_COUNT = 4;
enum D3D12_MINOR_VERSION = 0;
enum D3D12_MIN_BORDER_COLOR_COMPONENT = 0.0f;
enum D3D12_MIN_DEPTH = 0.0f;
enum D3D12_MIN_MAXANISOTROPY = 0;
enum D3D12_MIP_LOD_BIAS_MAX = 15.99f;
enum D3D12_MIP_LOD_BIAS_MIN = -16.0f;
enum D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
enum D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
enum D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4f;
enum D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
enum D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 0xffffffff;
enum D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff8;
enum D3D12_PACKED_TILE = 0xffffffff;
enum D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
enum D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
enum D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
enum D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
enum D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
enum D3D12_PS_FRONTFACING_DEFAULT_VALUE = 0xffffffff;
enum D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
enum D3D12_PS_FRONTFACING_TRUE_VALUE = 0xffffffff;
enum D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
enum D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_PS_INPUT_REGISTER_COUNT = 32;
enum D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
enum D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
enum D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0f;
enum D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
enum D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
enum D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
enum D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
enum D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
enum D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5f;
enum D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
enum D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
enum D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
enum D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
enum D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
enum D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
enum D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum D3D12_REQ_MAXANISOTROPY = 16;
enum D3D12_REQ_MIP_LEVELS = 15;
enum D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
enum D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
enum D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
enum D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25f;
enum D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
enum D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
enum D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D12_REQ_SUBRESOURCES = 30720;
enum D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
enum D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
enum D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
enum D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
enum D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
enum D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
enum D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
enum D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 0xffffffff;
enum D3D12_SHADER_MAJOR_VERSION = 5;
enum D3D12_SHADER_MAX_INSTANCES = 65535;
enum D3D12_SHADER_MAX_INTERFACES = 253;
enum D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
enum D3D12_SHADER_MAX_TYPES = 65535;
enum D3D12_SHADER_MINOR_VERSION = 1;
enum D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
enum D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
enum D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
enum D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
enum D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
enum D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
enum D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
enum D3D12_SO_BUFFER_SLOT_COUNT = 4;
enum D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff;
enum D3D12_SO_NO_RASTERIZED_STREAM = 0xffffffff;
enum D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
enum D3D12_SO_STREAM_COUNT = 4;
enum D3D12_SPEC_DATE_DAY = 14;
enum D3D12_SPEC_DATE_MONTH = 11;
enum D3D12_SPEC_DATE_YEAR = 2014;
enum D3D12_SPEC_VERSION = 1.16;
enum D3D12_SRGB_GAMMA = 2.2f;
enum D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92f;
enum D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055f;
enum D3D12_SRGB_TO_FLOAT_EXPONENT = 2.4f;
enum D3D12_SRGB_TO_FLOAT_OFFSET = 0.055f;
enum D3D12_SRGB_TO_FLOAT_THRESHOLD = 0.04045f;
enum D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5f;
enum D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
enum D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
enum D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
enum D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
enum D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
enum D3D12_STANDARD_VECTOR_SIZE = 4;
enum D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
enum D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
enum D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
enum D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
enum D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 0xffffffff;
enum D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff0;
enum D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
enum D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
enum D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
enum D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
enum D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
enum D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
enum D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
enum D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
enum D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
enum D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
enum D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
enum D3D12_UAV_SLOT_COUNT = 64;
enum D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
enum D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10;
enum D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = 4;
enum D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = 256;
enum D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = 256;
enum D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 0xffffffff;
enum D3D12_VIDEO_PROCESS_MAX_FILTERS = 32;
enum D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2;
enum D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
enum D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
enum D3D12_VIEWPORT_BOUNDS_MAX = 32767;
enum D3D12_VIEWPORT_BOUNDS_MIN = -32768;
enum D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
enum D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_VS_INPUT_REGISTER_COUNT = 32;
enum D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
enum D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
enum D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
enum D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
enum D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
enum D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;

alias D3D12_GPU_VIRTUAL_ADDRESS = UINT64;

enum D3D12_COMMAND_LIST_TYPE
{
	D3D12_COMMAND_LIST_TYPE_DIRECT	= 0,
	D3D12_COMMAND_LIST_TYPE_BUNDLE	= 1,
	D3D12_COMMAND_LIST_TYPE_COMPUTE	= 2,
	D3D12_COMMAND_LIST_TYPE_COPY	= 3,
	D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE	= 4,
	D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS	= 5
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_COMMAND_QUEUE_FLAGS
{
	D3D12_COMMAND_QUEUE_FLAG_NONE	= 0,
	D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT	= 0x1
}

enum D3D12_COMMAND_QUEUE_PRIORITY
{
	D3D12_COMMAND_QUEUE_PRIORITY_NORMAL	= 0,
	D3D12_COMMAND_QUEUE_PRIORITY_HIGH	= 100,
	D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME	= 10000
}

struct D3D12_COMMAND_QUEUE_DESC
{
	D3D12_COMMAND_LIST_TYPE Type;
	INT Priority;
	D3D12_COMMAND_QUEUE_FLAGS Flags;
	UINT NodeMask;
}

enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED	= 0,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT	= 1,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE	= 2,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE	= 3,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH	= 4
}

enum D3D12_INPUT_CLASSIFICATION
{
	D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA	= 0,
	D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA	= 1
}

struct D3D12_INPUT_ELEMENT_DESC
{
	LPCSTR SemanticName;
	UINT SemanticIndex;
	DXGI_FORMAT Format;
	UINT InputSlot;
	UINT AlignedByteOffset;
	D3D12_INPUT_CLASSIFICATION InputSlotClass;
	UINT InstanceDataStepRate;
}

enum D3D12_FILL_MODE
{
	D3D12_FILL_MODE_WIREFRAME	= 2,
	D3D12_FILL_MODE_SOLID	= 3
}

alias D3D12_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;

alias D3D12_PRIMITIVE = D3D_PRIMITIVE;

enum D3D12_CULL_MODE
{
	D3D12_CULL_MODE_NONE	= 1,
	D3D12_CULL_MODE_FRONT	= 2,
	D3D12_CULL_MODE_BACK	= 3
}

struct D3D12_SO_DECLARATION_ENTRY
{
	UINT Stream;
	LPCSTR SemanticName;
	UINT SemanticIndex;
	BYTE StartComponent;
	BYTE ComponentCount;
	BYTE OutputSlot;
}

struct D3D12_VIEWPORT
{
	FLOAT TopLeftX;
	FLOAT TopLeftY;
	FLOAT Width;
	FLOAT Height;
	FLOAT MinDepth;
	FLOAT MaxDepth;
}

alias D3D12_RECT = RECT;

struct D3D12_BOX
{
	UINT left;
	UINT top;
	UINT front;
	UINT right;
	UINT bottom;
	UINT back;
}

enum D3D12_COMPARISON_FUNC
{
	D3D12_COMPARISON_FUNC_NEVER	= 1,
	D3D12_COMPARISON_FUNC_LESS	= 2,
	D3D12_COMPARISON_FUNC_EQUAL	= 3,
	D3D12_COMPARISON_FUNC_LESS_EQUAL	= 4,
	D3D12_COMPARISON_FUNC_GREATER	= 5,
	D3D12_COMPARISON_FUNC_NOT_EQUAL	= 6,
	D3D12_COMPARISON_FUNC_GREATER_EQUAL	= 7,
	D3D12_COMPARISON_FUNC_ALWAYS	= 8
}

enum D3D12_DEPTH_WRITE_MASK
{
	D3D12_DEPTH_WRITE_MASK_ZERO	= 0,
	D3D12_DEPTH_WRITE_MASK_ALL	= 1
}

enum D3D12_STENCIL_OP
{
	D3D12_STENCIL_OP_KEEP	= 1,
	D3D12_STENCIL_OP_ZERO	= 2,
	D3D12_STENCIL_OP_REPLACE	= 3,
	D3D12_STENCIL_OP_INCR_SAT	= 4,
	D3D12_STENCIL_OP_DECR_SAT	= 5,
	D3D12_STENCIL_OP_INVERT	= 6,
	D3D12_STENCIL_OP_INCR	= 7,
	D3D12_STENCIL_OP_DECR	= 8
}

struct D3D12_DEPTH_STENCILOP_DESC
{
	D3D12_STENCIL_OP StencilFailOp;
	D3D12_STENCIL_OP StencilDepthFailOp;
	D3D12_STENCIL_OP StencilPassOp;
	D3D12_COMPARISON_FUNC StencilFunc;
}

struct D3D12_DEPTH_STENCIL_DESC
{
	BOOL DepthEnable;
	D3D12_DEPTH_WRITE_MASK DepthWriteMask;
	D3D12_COMPARISON_FUNC DepthFunc;
	BOOL StencilEnable;
	UINT8 StencilReadMask;
	UINT8 StencilWriteMask;
	D3D12_DEPTH_STENCILOP_DESC FrontFace;
	D3D12_DEPTH_STENCILOP_DESC BackFace;
}

struct D3D12_DEPTH_STENCIL_DESC1
{
	BOOL DepthEnable;
	D3D12_DEPTH_WRITE_MASK DepthWriteMask;
	D3D12_COMPARISON_FUNC DepthFunc;
	BOOL StencilEnable;
	UINT8 StencilReadMask;
	UINT8 StencilWriteMask;
	D3D12_DEPTH_STENCILOP_DESC FrontFace;
	D3D12_DEPTH_STENCILOP_DESC BackFace;
	BOOL DepthBoundsTestEnable;
}

enum D3D12_BLEND
{
	D3D12_BLEND_ZERO	= 1,
	D3D12_BLEND_ONE	= 2,
	D3D12_BLEND_SRC_COLOR	= 3,
	D3D12_BLEND_INV_SRC_COLOR	= 4,
	D3D12_BLEND_SRC_ALPHA	= 5,
	D3D12_BLEND_INV_SRC_ALPHA	= 6,
	D3D12_BLEND_DEST_ALPHA	= 7,
	D3D12_BLEND_INV_DEST_ALPHA	= 8,
	D3D12_BLEND_DEST_COLOR	= 9,
	D3D12_BLEND_INV_DEST_COLOR	= 10,
	D3D12_BLEND_SRC_ALPHA_SAT	= 11,
	D3D12_BLEND_BLEND_FACTOR	= 14,
	D3D12_BLEND_INV_BLEND_FACTOR	= 15,
	D3D12_BLEND_SRC1_COLOR	= 16,
	D3D12_BLEND_INV_SRC1_COLOR	= 17,
	D3D12_BLEND_SRC1_ALPHA	= 18,
	D3D12_BLEND_INV_SRC1_ALPHA	= 19
}

enum D3D12_BLEND_OP
{
	D3D12_BLEND_OP_ADD	= 1,
	D3D12_BLEND_OP_SUBTRACT	= 2,
	D3D12_BLEND_OP_REV_SUBTRACT	= 3,
	D3D12_BLEND_OP_MIN	= 4,
	D3D12_BLEND_OP_MAX	= 5
}

enum D3D12_COLOR_WRITE_ENABLE
{
	D3D12_COLOR_WRITE_ENABLE_RED	= 1,
	D3D12_COLOR_WRITE_ENABLE_GREEN	= 2,
	D3D12_COLOR_WRITE_ENABLE_BLUE	= 4,
	D3D12_COLOR_WRITE_ENABLE_ALPHA	= 8,
	D3D12_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN )  | D3D12_COLOR_WRITE_ENABLE_BLUE )  | D3D12_COLOR_WRITE_ENABLE_ALPHA ) 
}

enum D3D12_LOGIC_OP
{
	D3D12_LOGIC_OP_CLEAR	= 0,
	D3D12_LOGIC_OP_SET	= ( D3D12_LOGIC_OP_CLEAR + 1 ) ,
	D3D12_LOGIC_OP_COPY	= ( D3D12_LOGIC_OP_SET + 1 ) ,
	D3D12_LOGIC_OP_COPY_INVERTED	= ( D3D12_LOGIC_OP_COPY + 1 ) ,
	D3D12_LOGIC_OP_NOOP	= ( D3D12_LOGIC_OP_COPY_INVERTED + 1 ) ,
	D3D12_LOGIC_OP_INVERT	= ( D3D12_LOGIC_OP_NOOP + 1 ) ,
	D3D12_LOGIC_OP_AND	= ( D3D12_LOGIC_OP_INVERT + 1 ) ,
	D3D12_LOGIC_OP_NAND	= ( D3D12_LOGIC_OP_AND + 1 ) ,
	D3D12_LOGIC_OP_OR	= ( D3D12_LOGIC_OP_NAND + 1 ) ,
	D3D12_LOGIC_OP_NOR	= ( D3D12_LOGIC_OP_OR + 1 ) ,
	D3D12_LOGIC_OP_XOR	= ( D3D12_LOGIC_OP_NOR + 1 ) ,
	D3D12_LOGIC_OP_EQUIV	= ( D3D12_LOGIC_OP_XOR + 1 ) ,
	D3D12_LOGIC_OP_AND_REVERSE	= ( D3D12_LOGIC_OP_EQUIV + 1 ) ,
	D3D12_LOGIC_OP_AND_INVERTED	= ( D3D12_LOGIC_OP_AND_REVERSE + 1 ) ,
	D3D12_LOGIC_OP_OR_REVERSE	= ( D3D12_LOGIC_OP_AND_INVERTED + 1 ) ,
	D3D12_LOGIC_OP_OR_INVERTED	= ( D3D12_LOGIC_OP_OR_REVERSE + 1 ) 
}

struct D3D12_RENDER_TARGET_BLEND_DESC
{
	BOOL BlendEnable;
	BOOL LogicOpEnable;
	D3D12_BLEND SrcBlend;
	D3D12_BLEND DestBlend;
	D3D12_BLEND_OP BlendOp;
	D3D12_BLEND SrcBlendAlpha;
	D3D12_BLEND DestBlendAlpha;
	D3D12_BLEND_OP BlendOpAlpha;
	D3D12_LOGIC_OP LogicOp;
	UINT8 RenderTargetWriteMask;
}

struct D3D12_BLEND_DESC
{
	BOOL AlphaToCoverageEnable;
	BOOL IndependentBlendEnable;
	D3D12_RENDER_TARGET_BLEND_DESC[ 8 ] RenderTarget;
}

enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF	= 0,
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON	= 1
}

struct D3D12_RASTERIZER_DESC
{
	D3D12_FILL_MODE FillMode;
	D3D12_CULL_MODE CullMode;
	BOOL FrontCounterClockwise;
	INT DepthBias;
	FLOAT DepthBiasClamp;
	FLOAT SlopeScaledDepthBias;
	BOOL DepthClipEnable;
	BOOL MultisampleEnable;
	BOOL AntialiasedLineEnable;
	UINT ForcedSampleCount;
	D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
}


extern( C ) extern const IID IID_ID3D12Object;
@MIDL_INTERFACE!("c4fec28f-7966-4e95-9f94-f431cb56c3b8")
interface ID3D12Object : IUnknown
{
public:
	HRESULT GetPrivateData( 
		REFGUID guid,
		UINT *pDataSize,
		void *pData);

	HRESULT SetPrivateData( 
		REFGUID guid,
		UINT DataSize,
		const void *pData);

	HRESULT SetPrivateDataInterface( 
		REFGUID guid,
		const IUnknown pData);

	HRESULT SetName( 
		LPCWSTR Name);

}

extern( C ) extern const IID IID_ID3D12DeviceChild;
@MIDL_INTERFACE!("905db94b-a00c-4140-9df5-2b64ca9ea357")
interface ID3D12DeviceChild : ID3D12Object
{
public:
	HRESULT GetDevice( 
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvDevice);
}

extern( C ) extern const IID IID_ID3D12RootSignature;
@MIDL_INTERFACE!("c54a6b66-72df-4ee8-8be5-a946a1429214")
interface ID3D12RootSignature : ID3D12DeviceChild
{
public:
}

struct D3D12_SHADER_BYTECODE
{
	@_Field_size_bytes_full_!(BytecodeLength)
	const void *pShaderBytecode;
	SIZE_T BytecodeLength;
}

struct D3D12_STREAM_OUTPUT_DESC
{
	@_Field_size_full_!(NumEntries)
	const D3D12_SO_DECLARATION_ENTRY *pSODeclaration;
	UINT NumEntries;
	@_Field_size_full_!(NumStrides)
	const UINT *pBufferStrides;
	UINT NumStrides;
	UINT RasterizedStream;
}

struct D3D12_INPUT_LAYOUT_DESC
{
	@_Field_size_full_!(NumElements)
	const D3D12_INPUT_ELEMENT_DESC *pInputElementDescs;
	UINT NumElements;
}

enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
{
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED	= 0,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF	= 1,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF	= 2
}

struct D3D12_CACHED_PIPELINE_STATE
{
	@_Field_size_bytes_full_!(CachedBlobSizeInBytes)
	const void *pCachedBlob;
	SIZE_T CachedBlobSizeInBytes;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_PIPELINE_STATE_FLAGS
{
	D3D12_PIPELINE_STATE_FLAG_NONE	= 0,
	D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG	= 0x1
}

struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
	ID3D12RootSignature pRootSignature;
	D3D12_SHADER_BYTECODE VS;
	D3D12_SHADER_BYTECODE PS;
	D3D12_SHADER_BYTECODE DS;
	D3D12_SHADER_BYTECODE HS;
	D3D12_SHADER_BYTECODE GS;
	D3D12_STREAM_OUTPUT_DESC StreamOutput;
	D3D12_BLEND_DESC BlendState;
	UINT SampleMask;
	D3D12_RASTERIZER_DESC RasterizerState;
	D3D12_DEPTH_STENCIL_DESC DepthStencilState;
	D3D12_INPUT_LAYOUT_DESC InputLayout;
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
	D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
	UINT NumRenderTargets;
	DXGI_FORMAT[ 8 ] RTVFormats;
	DXGI_FORMAT DSVFormat;
	DXGI_SAMPLE_DESC SampleDesc;
	UINT NodeMask;
	D3D12_CACHED_PIPELINE_STATE CachedPSO;
	D3D12_PIPELINE_STATE_FLAGS Flags;
}

struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
	ID3D12RootSignature pRootSignature;
	D3D12_SHADER_BYTECODE CS;
	UINT NodeMask;
	D3D12_CACHED_PIPELINE_STATE CachedPSO;
	D3D12_PIPELINE_STATE_FLAGS Flags;
}

struct D3D12_RT_FORMAT_ARRAY
{
	DXGI_FORMAT[ 8 ] RTFormats;
	UINT NumRenderTargets;
}

struct D3D12_PIPELINE_STATE_STREAM_DESC
{
	SIZE_T SizeInBytes;
	void *pPipelineStateSubobjectStream;
}

enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
	{
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE	= 0,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 + 1 ) ,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING + 1 ) 
}

enum D3D12_FEATURE
{
	D3D12_FEATURE_D3D12_OPTIONS	= 0,
	D3D12_FEATURE_ARCHITECTURE	= 1,
	D3D12_FEATURE_FEATURE_LEVELS	= 2,
	D3D12_FEATURE_FORMAT_SUPPORT	= 3,
	D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS	= 4,
	D3D12_FEATURE_FORMAT_INFO	= 5,
	D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT	= 6,
	D3D12_FEATURE_SHADER_MODEL	= 7,
	D3D12_FEATURE_D3D12_OPTIONS1	= 8,
	D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT	= 10,
	D3D12_FEATURE_ROOT_SIGNATURE	= 12,
	D3D12_FEATURE_ARCHITECTURE1	= 16,
	D3D12_FEATURE_D3D12_OPTIONS2	= 18,
	D3D12_FEATURE_SHADER_CACHE	= 19,
	D3D12_FEATURE_COMMAND_QUEUE_PRIORITY	= 20,
	D3D12_FEATURE_D3D12_OPTIONS3	= 21,
	D3D12_FEATURE_EXISTING_HEAPS	= 22,
	D3D12_FEATURE_D3D12_OPTIONS4	= 23,
	D3D12_FEATURE_SERIALIZATION	= 24,
	D3D12_FEATURE_CROSS_NODE	= 25
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_SHADER_MIN_PRECISION_SUPPORT
{
	D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE	= 0,
	D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT	= 0x1,
	D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT	= 0x2
}

enum D3D12_TILED_RESOURCES_TIER
{
	D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED	= 0,
	D3D12_TILED_RESOURCES_TIER_1	= 1,
	D3D12_TILED_RESOURCES_TIER_2	= 2,
	D3D12_TILED_RESOURCES_TIER_3	= 3,
	D3D12_TILED_RESOURCES_TIER_4	= 4
}

enum D3D12_RESOURCE_BINDING_TIER
{
	D3D12_RESOURCE_BINDING_TIER_1	= 1,
	D3D12_RESOURCE_BINDING_TIER_2	= 2,
	D3D12_RESOURCE_BINDING_TIER_3	= 3
}

enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
{
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED	= 0,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_1	= 1,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_2	= 2,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_3	= 3
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_FORMAT_SUPPORT1
{
	D3D12_FORMAT_SUPPORT1_NONE	= 0,
	D3D12_FORMAT_SUPPORT1_BUFFER	= 0x1,
	D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER	= 0x2,
	D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER	= 0x4,
	D3D12_FORMAT_SUPPORT1_SO_BUFFER	= 0x8,
	D3D12_FORMAT_SUPPORT1_TEXTURE1D	= 0x10,
	D3D12_FORMAT_SUPPORT1_TEXTURE2D	= 0x20,
	D3D12_FORMAT_SUPPORT1_TEXTURE3D	= 0x40,
	D3D12_FORMAT_SUPPORT1_TEXTURECUBE	= 0x80,
	D3D12_FORMAT_SUPPORT1_SHADER_LOAD	= 0x100,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE	= 0x200,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON	= 0x400,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT	= 0x800,
	D3D12_FORMAT_SUPPORT1_MIP	= 0x1000,
	D3D12_FORMAT_SUPPORT1_RENDER_TARGET	= 0x4000,
	D3D12_FORMAT_SUPPORT1_BLENDABLE	= 0x8000,
	D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL	= 0x10000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE	= 0x40000,
	D3D12_FORMAT_SUPPORT1_DISPLAY	= 0x80000,
	D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT	= 0x100000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET	= 0x200000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD	= 0x400000,
	D3D12_FORMAT_SUPPORT1_SHADER_GATHER	= 0x800000,
	D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST	= 0x1000000,
	D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW	= 0x2000000,
	D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON	= 0x4000000,
	D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT	= 0x8000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT	= 0x10000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT	= 0x20000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER	= 0x40000000
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_FORMAT_SUPPORT2
{
	D3D12_FORMAT_SUPPORT2_NONE	= 0,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD	= 0x1,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS	= 0x2,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	= 0x4,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE	= 0x8,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX	= 0x10,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	= 0x20,
	D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD	= 0x40,
	D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE	= 0x80,
	D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP	= 0x100,
	D3D12_FORMAT_SUPPORT2_TILED	= 0x200,
	D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY	= 0x4000
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
{
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE	= 0,
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE	= 0x1
}

enum D3D12_CROSS_NODE_SHARING_TIER
{
	D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED	= 0,
	D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED	= 1,
	D3D12_CROSS_NODE_SHARING_TIER_1	= 2,
	D3D12_CROSS_NODE_SHARING_TIER_2	= 3,
	D3D12_CROSS_NODE_SHARING_TIER_3	= 4
}

enum D3D12_RESOURCE_HEAP_TIER
{
	D3D12_RESOURCE_HEAP_TIER_1	= 1,
	D3D12_RESOURCE_HEAP_TIER_2	= 2
}

enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
{
	D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED	= 0,
	D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1	= 1,
	D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2	= 2
}

enum D3D12_VIEW_INSTANCING_TIER
{
	D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED	= 0,
	D3D12_VIEW_INSTANCING_TIER_1	= 1,
	D3D12_VIEW_INSTANCING_TIER_2	= 2,
	D3D12_VIEW_INSTANCING_TIER_3	= 3
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
	BOOL DoublePrecisionFloatShaderOps;
	BOOL OutputMergerLogicOp;
	D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
	D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
	D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
	BOOL PSSpecifiedStencilRefSupported;
	BOOL TypedUAVLoadAdditionalFormats;
	BOOL ROVsSupported;
	D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
	UINT MaxGPUVirtualAddressBitsPerResource;
	BOOL StandardSwizzle64KBSupported;
	D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
	BOOL CrossAdapterRowMajorTextureSupported;
	BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
	D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
{
	BOOL WaveOps;
	UINT WaveLaneCountMin;
	UINT WaveLaneCountMax;
	UINT TotalLaneCount;
	BOOL ExpandedComputeResourceStates;
	BOOL Int64ShaderOps;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
{
	BOOL DepthBoundsTestSupported;
	D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
}

enum D3D_ROOT_SIGNATURE_VERSION
{
	D3D_ROOT_SIGNATURE_VERSION_1	= 0x1,
	D3D_ROOT_SIGNATURE_VERSION_1_0	= 0x1,
	D3D_ROOT_SIGNATURE_VERSION_1_1	= 0x2
}

struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
{
	D3D_ROOT_SIGNATURE_VERSION HighestVersion;
}

struct D3D12_FEATURE_DATA_ARCHITECTURE
{
	UINT NodeIndex;
	BOOL TileBasedRenderer;
	BOOL UMA;
	BOOL CacheCoherentUMA;
}

struct D3D12_FEATURE_DATA_ARCHITECTURE1
{
	UINT NodeIndex;
	BOOL TileBasedRenderer;
	BOOL UMA;
	BOOL CacheCoherentUMA;
	BOOL IsolatedMMU;
}

struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
	UINT NumFeatureLevels;
	@_In_reads_!(NumFeatureLevels)
	const D3D_FEATURE_LEVEL *pFeatureLevelsRequested;
	D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
}

enum D3D_SHADER_MODEL
{
	D3D_SHADER_MODEL_5_1	= 0x51,
	D3D_SHADER_MODEL_6_0	= 0x60,
	D3D_SHADER_MODEL_6_1	= 0x61,
	D3D_SHADER_MODEL_6_2	= 0x62
}

struct D3D12_FEATURE_DATA_SHADER_MODEL
{
	D3D_SHADER_MODEL HighestShaderModel;
}

struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
	DXGI_FORMAT Format;
	D3D12_FORMAT_SUPPORT1 Support1;
	D3D12_FORMAT_SUPPORT2 Support2;
}

struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
	DXGI_FORMAT Format;
	UINT SampleCount;
	D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
	UINT NumQualityLevels;
}

struct D3D12_FEATURE_DATA_FORMAT_INFO
{
	DXGI_FORMAT Format;
	UINT8 PlaneCount;
}

struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
	UINT MaxGPUVirtualAddressBitsPerResource;
	UINT MaxGPUVirtualAddressBitsPerProcess;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_SHADER_CACHE_SUPPORT_FLAGS
{
	D3D12_SHADER_CACHE_SUPPORT_NONE	= 0,
	D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO	= 0x1,
	D3D12_SHADER_CACHE_SUPPORT_LIBRARY	= 0x2,
	D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE	= 0x4,
	D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE	= 0x8
}

struct D3D12_FEATURE_DATA_SHADER_CACHE
{
	D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
}

struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
{
	D3D12_COMMAND_LIST_TYPE CommandListType;
	UINT Priority;
	BOOL PriorityForTypeIsSupported;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_COMMAND_LIST_SUPPORT_FLAGS
{
	D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE	= 0,
	D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT	= ( 1 << D3D12_COMMAND_LIST_TYPE.D3D12_COMMAND_LIST_TYPE_DIRECT ) ,
	D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE	= ( 1 << D3D12_COMMAND_LIST_TYPE.D3D12_COMMAND_LIST_TYPE_BUNDLE ) ,
	D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE	= ( 1 << D3D12_COMMAND_LIST_TYPE.D3D12_COMMAND_LIST_TYPE_COMPUTE ) ,
	D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY	= ( 1 << D3D12_COMMAND_LIST_TYPE.D3D12_COMMAND_LIST_TYPE_COPY ) ,
	D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE	= ( 1 << D3D12_COMMAND_LIST_TYPE.D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE ) ,
	D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS	= ( 1 << D3D12_COMMAND_LIST_TYPE.D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS ) 
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
{
	BOOL CopyQueueTimestampQueriesSupported;
	BOOL CastingFullyTypedFormatSupported;
	D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
	D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
	BOOL BarycentricsSupported;
}

struct D3D12_FEATURE_DATA_EXISTING_HEAPS
{
	BOOL Supported;
}

enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
{
	D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0	= 0,
	D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1	= ( D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 + 1 ) 
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
{
	BOOL MSAA64KBAlignedTextureSupported;
	D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
	BOOL Native16BitShaderOpsSupported;
}

enum D3D12_HEAP_SERIALIZATION_TIER
{
	D3D12_HEAP_SERIALIZATION_TIER_0	= 0,
	D3D12_HEAP_SERIALIZATION_TIER_10	= 10
}

struct D3D12_FEATURE_DATA_SERIALIZATION
{
	UINT NodeIndex;
	D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
}

struct D3D12_FEATURE_DATA_CROSS_NODE
{
	D3D12_CROSS_NODE_SHARING_TIER SharingTier;
	BOOL AtomicShaderInstructions;
}

struct D3D12_RESOURCE_ALLOCATION_INFO
{
	UINT64 SizeInBytes;
	UINT64 Alignment;
}

struct D3D12_RESOURCE_ALLOCATION_INFO1
{
	UINT64 Offset;
	UINT64 Alignment;
	UINT64 SizeInBytes;
}

enum D3D12_HEAP_TYPE
{
	D3D12_HEAP_TYPE_DEFAULT	= 1,
	D3D12_HEAP_TYPE_UPLOAD	= 2,
	D3D12_HEAP_TYPE_READBACK	= 3,
	D3D12_HEAP_TYPE_CUSTOM	= 4
}

enum D3D12_CPU_PAGE_PROPERTY
{
	D3D12_CPU_PAGE_PROPERTY_UNKNOWN	= 0,
	D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE	= 1,
	D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE	= 2,
	D3D12_CPU_PAGE_PROPERTY_WRITE_BACK	= 3
}

enum D3D12_MEMORY_POOL
{
	D3D12_MEMORY_POOL_UNKNOWN	= 0,
	D3D12_MEMORY_POOL_L0	= 1,
	D3D12_MEMORY_POOL_L1	= 2
}

struct D3D12_HEAP_PROPERTIES
{
	D3D12_HEAP_TYPE Type;
	D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
	D3D12_MEMORY_POOL MemoryPoolPreference;
	UINT CreationNodeMask;
	UINT VisibleNodeMask;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_HEAP_FLAGS
{
	D3D12_HEAP_FLAG_NONE	= 0,
	D3D12_HEAP_FLAG_SHARED	= 0x1,
	D3D12_HEAP_FLAG_DENY_BUFFERS	= 0x4,
	D3D12_HEAP_FLAG_ALLOW_DISPLAY	= 0x8,
	D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER	= 0x20,
	D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES	= 0x40,
	D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES	= 0x80,
	D3D12_HEAP_FLAG_HARDWARE_PROTECTED	= 0x100,
	D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH	= 0x200,
	D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS	= 0x400,
	D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES	= 0,
	D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS	= 0xc0,
	D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES	= 0x44,
	D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES	= 0x84
}

struct D3D12_HEAP_DESC
{
	UINT64 SizeInBytes;
	D3D12_HEAP_PROPERTIES Properties;
	UINT64 Alignment;
	D3D12_HEAP_FLAGS Flags;
}

enum D3D12_RESOURCE_DIMENSION
{
	D3D12_RESOURCE_DIMENSION_UNKNOWN	= 0,
	D3D12_RESOURCE_DIMENSION_BUFFER	= 1,
	D3D12_RESOURCE_DIMENSION_TEXTURE1D	= 2,
	D3D12_RESOURCE_DIMENSION_TEXTURE2D	= 3,
	D3D12_RESOURCE_DIMENSION_TEXTURE3D	= 4
}

enum D3D12_TEXTURE_LAYOUT
{
	D3D12_TEXTURE_LAYOUT_UNKNOWN	= 0,
	D3D12_TEXTURE_LAYOUT_ROW_MAJOR	= 1,
	D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE	= 2,
	D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE	= 3
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_RESOURCE_FLAGS
{
	D3D12_RESOURCE_FLAG_NONE	= 0,
	D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET	= 0x1,
	D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL	= 0x2,
	D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS	= 0x4,
	D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE	= 0x8,
	D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER	= 0x10,
	D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS	= 0x20,
	D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY	= 0x40
}

struct D3D12_RESOURCE_DESC
{
	D3D12_RESOURCE_DIMENSION Dimension;
	UINT64 Alignment;
	UINT64 Width;
	UINT Height;
	UINT16 DepthOrArraySize;
	UINT16 MipLevels;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D12_TEXTURE_LAYOUT Layout;
	D3D12_RESOURCE_FLAGS Flags;
}

struct D3D12_DEPTH_STENCIL_VALUE
{
	FLOAT Depth;
	UINT8 Stencil;
}

struct D3D12_CLEAR_VALUE
{
	DXGI_FORMAT Format;
	union
	{
		FLOAT[ 4 ] Color;
		D3D12_DEPTH_STENCIL_VALUE DepthStencil;
	}
}

struct D3D12_RANGE
{
	SIZE_T Begin;
	SIZE_T End;
}

struct D3D12_RANGE_UINT64
{
	UINT64 Begin;
	UINT64 End;
}

struct D3D12_SUBRESOURCE_RANGE_UINT64
{
	UINT Subresource;
	D3D12_RANGE_UINT64 Range;
}

struct D3D12_SUBRESOURCE_INFO
{
	UINT64 Offset;
	UINT RowPitch;
	UINT DepthPitch;
}

struct D3D12_TILED_RESOURCE_COORDINATE
{
	UINT X;
	UINT Y;
	UINT Z;
	UINT Subresource;
}

struct D3D12_TILE_REGION_SIZE
{
	UINT NumTiles;
	BOOL UseBox;
	UINT Width;
	UINT16 Height;
	UINT16 Depth;
}

enum D3D12_TILE_RANGE_FLAGS
{
	D3D12_TILE_RANGE_FLAG_NONE	= 0,
	D3D12_TILE_RANGE_FLAG_NULL	= 1,
	D3D12_TILE_RANGE_FLAG_SKIP	= 2,
	D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE	= 4
}

struct D3D12_SUBRESOURCE_TILING
{
	UINT WidthInTiles;
	UINT16 HeightInTiles;
	UINT16 DepthInTiles;
	UINT StartTileIndexInOverallResource;
}

struct D3D12_TILE_SHAPE
{
	UINT WidthInTexels;
	UINT HeightInTexels;
	UINT DepthInTexels;
}

struct D3D12_PACKED_MIP_INFO
{
	UINT8 NumStandardMips;
	UINT8 NumPackedMips;
	UINT NumTilesForPackedMips;
	UINT StartTileIndexInOverallResource;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_TILE_MAPPING_FLAGS
{
	D3D12_TILE_MAPPING_FLAG_NONE	= 0,
	D3D12_TILE_MAPPING_FLAG_NO_HAZARD	= 0x1
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_TILE_COPY_FLAGS
{
	D3D12_TILE_COPY_FLAG_NONE	= 0,
	D3D12_TILE_COPY_FLAG_NO_HAZARD	= 0x1,
	D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE	= 0x2,
	D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER	= 0x4
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_RESOURCE_STATES
{
	D3D12_RESOURCE_STATE_COMMON	= 0,
	D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER	= 0x1,
	D3D12_RESOURCE_STATE_INDEX_BUFFER	= 0x2,
	D3D12_RESOURCE_STATE_RENDER_TARGET	= 0x4,
	D3D12_RESOURCE_STATE_UNORDERED_ACCESS	= 0x8,
	D3D12_RESOURCE_STATE_DEPTH_WRITE	= 0x10,
	D3D12_RESOURCE_STATE_DEPTH_READ	= 0x20,
	D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE	= 0x40,
	D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE	= 0x80,
	D3D12_RESOURCE_STATE_STREAM_OUT	= 0x100,
	D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT	= 0x200,
	D3D12_RESOURCE_STATE_COPY_DEST	= 0x400,
	D3D12_RESOURCE_STATE_COPY_SOURCE	= 0x800,
	D3D12_RESOURCE_STATE_RESOLVE_DEST	= 0x1000,
	D3D12_RESOURCE_STATE_RESOLVE_SOURCE	= 0x2000,
	D3D12_RESOURCE_STATE_GENERIC_READ	= ( ( ( ( ( 0x1 | 0x2 )  | 0x40 )  | 0x80 )  | 0x200 )  | 0x800 ) ,
	D3D12_RESOURCE_STATE_PRESENT	= 0,
	D3D12_RESOURCE_STATE_PREDICATION	= 0x200,
	D3D12_RESOURCE_STATE_VIDEO_DECODE_READ	= 0x10000,
	D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE	= 0x20000,
	D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ	= 0x40000,
	D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE	= 0x80000
}

enum D3D12_RESOURCE_BARRIER_TYPE
{
	D3D12_RESOURCE_BARRIER_TYPE_TRANSITION	= 0,
	D3D12_RESOURCE_BARRIER_TYPE_ALIASING	= ( D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1 ) ,
	D3D12_RESOURCE_BARRIER_TYPE_UAV	= ( D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1 ) 
}


struct D3D12_RESOURCE_TRANSITION_BARRIER
{
	ID3D12Resource pResource;
	UINT Subresource;
	D3D12_RESOURCE_STATES StateBefore;
	D3D12_RESOURCE_STATES StateAfter;
}

struct D3D12_RESOURCE_ALIASING_BARRIER
{
	ID3D12Resource pResourceBefore;
	ID3D12Resource pResourceAfter;
}

struct D3D12_RESOURCE_UAV_BARRIER
{
	ID3D12Resource pResource;
}


@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_RESOURCE_BARRIER_FLAGS
{
	D3D12_RESOURCE_BARRIER_FLAG_NONE	= 0,
	D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY	= 0x1,
	D3D12_RESOURCE_BARRIER_FLAG_END_ONLY	= 0x2
}

struct D3D12_RESOURCE_BARRIER
{
	D3D12_RESOURCE_BARRIER_TYPE Type;
	D3D12_RESOURCE_BARRIER_FLAGS Flags;
	union
	{
		D3D12_RESOURCE_TRANSITION_BARRIER Transition;
		D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
		D3D12_RESOURCE_UAV_BARRIER UAV;
	}
}

struct D3D12_SUBRESOURCE_FOOTPRINT
{
	DXGI_FORMAT Format;
	UINT Width;
	UINT Height;
	UINT Depth;
	UINT RowPitch;
}

struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
{
	UINT64 Offset;
	D3D12_SUBRESOURCE_FOOTPRINT Footprint;
}


enum D3D12_TEXTURE_COPY_TYPE
{
	D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX	= 0,
	D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT	= 1
}

struct D3D12_TEXTURE_COPY_LOCATION
{
	ID3D12Resource pResource;
	D3D12_TEXTURE_COPY_TYPE Type;
	union 
	{
		D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
		UINT SubresourceIndex;
	}
}


enum D3D12_RESOLVE_MODE
{
	D3D12_RESOLVE_MODE_DECOMPRESS	= 0,
	D3D12_RESOLVE_MODE_MIN	= 1,
	D3D12_RESOLVE_MODE_MAX	= 2,
	D3D12_RESOLVE_MODE_AVERAGE	= 3
}

struct D3D12_SAMPLE_POSITION
{
	INT8 X;
	INT8 Y;
}

struct D3D12_VIEW_INSTANCE_LOCATION
{
	UINT ViewportArrayIndex;
	UINT RenderTargetArrayIndex;
}


@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_VIEW_INSTANCING_FLAGS
{
	D3D12_VIEW_INSTANCING_FLAG_NONE	= 0,
	D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING	= 0x1
}

struct D3D12_VIEW_INSTANCING_DESC
{
	UINT ViewInstanceCount;
	@_Field_size_full_!(ViewInstanceCount)
	const D3D12_VIEW_INSTANCE_LOCATION *pViewInstanceLocations;
	D3D12_VIEW_INSTANCING_FLAGS Flags;
}

enum D3D12_SHADER_COMPONENT_MAPPING
{
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0	= 0,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1	= 1,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2	= 2,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3	= 3,
	D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0	= 4,
	D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1	= 5
}

enum D3D12_SHADER_COMPONENT_MAPPING_MASK = 0x7;
enum D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
enum D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = ( 1 << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 4 ) );

pragma( inline, true ) auto D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING( T )( T Src0, T Src1, T Src2, T Src3 )
{
	return (	( Src0 & D3D12_SHADER_COMPONENT_MAPPING_MASK )
			|	( ( Src1 & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << D3D12_SHADER_COMPONENT_MAPPING_SHIFT )
			|	( ( Src2 & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 2 ) )
			|	( ( Src3 & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 3 ) )
			|	( D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES ) );
}

pragma( inline, true ) auto D3D12_DECODE_SHADER_4_COMPONENT_MAPPING( T, U )( T ComponentToExtract, U Mapping )
{
	return cast( D3D12_SHADER_COMPONENT_MAPPING )( Mapping >> ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * ComponentToExtract ) & D3D12_SHADER_COMPONENT_MAPPING_MASK );
}

enum D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING = D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING( 0, 1, 2, 3 );

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_BUFFER_SRV_FLAGS
{
	D3D12_BUFFER_SRV_FLAG_NONE	= 0,
	D3D12_BUFFER_SRV_FLAG_RAW	= 0x1
}

struct D3D12_BUFFER_SRV
{
	UINT64 FirstElement;
	UINT NumElements;
	UINT StructureByteStride;
	D3D12_BUFFER_SRV_FLAGS Flags;
}

struct D3D12_TEX1D_SRV
{
	UINT MostDetailedMip;
	UINT MipLevels;
	FLOAT ResourceMinLODClamp;
}

struct D3D12_TEX1D_ARRAY_SRV
{
	UINT MostDetailedMip;
	UINT MipLevels;
	UINT FirstArraySlice;
	UINT ArraySize;
	FLOAT ResourceMinLODClamp;
}

struct D3D12_TEX2D_SRV
{
	UINT MostDetailedMip;
	UINT MipLevels;
	UINT PlaneSlice;
	FLOAT ResourceMinLODClamp;
}

struct D3D12_TEX2D_ARRAY_SRV
{
	UINT MostDetailedMip;
	UINT MipLevels;
	UINT FirstArraySlice;
	UINT ArraySize;
	UINT PlaneSlice;
	FLOAT ResourceMinLODClamp;
}

struct D3D12_TEX3D_SRV
{
	UINT MostDetailedMip;
	UINT MipLevels;
	FLOAT ResourceMinLODClamp;
}

struct D3D12_TEXCUBE_SRV
{
	UINT MostDetailedMip;
	UINT MipLevels;
	FLOAT ResourceMinLODClamp;
}

struct D3D12_TEXCUBE_ARRAY_SRV
{
	UINT MostDetailedMip;
	UINT MipLevels;
	UINT First2DArrayFace;
	UINT NumCubes;
	FLOAT ResourceMinLODClamp;
}

struct D3D12_TEX2DMS_SRV
{
	UINT UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_SRV
{
	UINT FirstArraySlice;
	UINT ArraySize;
}

enum D3D12_SRV_DIMENSION
{
	D3D12_SRV_DIMENSION_UNKNOWN	= 0,
	D3D12_SRV_DIMENSION_BUFFER	= 1,
	D3D12_SRV_DIMENSION_TEXTURE1D	= 2,
	D3D12_SRV_DIMENSION_TEXTURE1DARRAY	= 3,
	D3D12_SRV_DIMENSION_TEXTURE2D	= 4,
	D3D12_SRV_DIMENSION_TEXTURE2DARRAY	= 5,
	D3D12_SRV_DIMENSION_TEXTURE2DMS	= 6,
	D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY	= 7,
	D3D12_SRV_DIMENSION_TEXTURE3D	= 8,
	D3D12_SRV_DIMENSION_TEXTURECUBE	= 9,
	D3D12_SRV_DIMENSION_TEXTURECUBEARRAY	= 10
}

struct D3D12_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_SRV_DIMENSION ViewDimension;
	UINT Shader4ComponentMapping;
	union {
		D3D12_BUFFER_SRV Buffer;
		D3D12_TEX1D_SRV Texture1D;
		D3D12_TEX1D_ARRAY_SRV Texture1DArray;
		D3D12_TEX2D_SRV Texture2D;
		D3D12_TEX2D_ARRAY_SRV Texture2DArray;
		D3D12_TEX2DMS_SRV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
		D3D12_TEX3D_SRV Texture3D;
		D3D12_TEXCUBE_SRV TextureCube;
		D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
	}
}

struct D3D12_CONSTANT_BUFFER_VIEW_DESC
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	UINT SizeInBytes;
}

enum D3D12_FILTER
{
	D3D12_FILTER_MIN_MAG_MIP_POINT	= 0,
	D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
	D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
	D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
	D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
	D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
	D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
	D3D12_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
	D3D12_FILTER_ANISOTROPIC	= 0x55,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
	D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
	D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
	D3D12_FILTER_COMPARISON_ANISOTROPIC	= 0xd5,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT	= 0x100,
	D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x101,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x104,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x105,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x110,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x111,
	D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x114,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR	= 0x115,
	D3D12_FILTER_MINIMUM_ANISOTROPIC	= 0x155,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT	= 0x180,
	D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x181,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x184,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x185,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x190,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x191,
	D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x194,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR	= 0x195,
	D3D12_FILTER_MAXIMUM_ANISOTROPIC	= 0x1d5
}

enum D3D12_FILTER_TYPE
{
	D3D12_FILTER_TYPE_POINT	= 0,
	D3D12_FILTER_TYPE_LINEAR	= 1
}

enum D3D12_FILTER_REDUCTION_TYPE
{
	D3D12_FILTER_REDUCTION_TYPE_STANDARD	= 0,
	D3D12_FILTER_REDUCTION_TYPE_COMPARISON	= 1,
	D3D12_FILTER_REDUCTION_TYPE_MINIMUM	= 2,
	D3D12_FILTER_REDUCTION_TYPE_MAXIMUM	= 3
}

enum D3D12_FILTER_REDUCTION_TYPE_MASK = 0x3;
enum D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
enum D3D12_FILTER_TYPE_MASK = 0x3;
enum D3D12_MIN_FILTER_SHIFT = 4;
enum D3D12_MAG_FILTER_SHIFT = 2;
enum D3D12_MIP_FILTER_SHIFT = 0;
enum D3D12_ANISOTROPIC_FILTERING_BIT = 0x40;

pragma( inline, true ) auto D3D12_ENCODE_BASIC_FILTER( X, Y, Z, W )( X min, Y mag, Z mip, W reduction )
{
	return cast( D3D12_FILTER )(	( ( ( min ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIN_FILTER_SHIFT )
								|	( ( ( mag ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MAG_FILTER_SHIFT )
								|	( ( ( mip ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIP_FILTER_SHIFT )
								|	( ( ( reduction ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) << D3D12_FILTER_REDUCTION_TYPE_SHIFT )
								);
}

pragma( inline, true ) auto D3D12_ENCODE_ANISOTROPIC_FILTER( T )( T reduction )
{
	return cast( D3D12_FILTER )(	D3D12_ANISOTROPIC_FILTERING_BIT
								|	D3D12_ENCODE_BASIC_FILTER(	D3D12_FILTER_TYPE_LINEAR,
																D3D12_FILTER_TYPE_LINEAR,
																D3D12_FILTER_TYPE_LINEAR,
																reduction )
								);
}

pragma( inline, true ) auto D3D12_DECODE_MIN_FILTER( T )( T D3D12Filter )
{
	return cast( D3D12_FILTER_TYPE )( ( D3D12Filter >> D3D12_MIN_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK );
}

pragma( inline, true ) auto D3D12_DECODE_MAG_FILTER( T )( T D3D12Filter )
{
	return cast( D3D12_FILTER_TYPE )( ( D3D12Filter >> D3D12_MAG_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK );
}

pragma( inline, true ) auto D3D12_DECODE_MIP_FILTER( T )( T D3D12Filter )
{
	return cast( D3D12_FILTER_TYPE )( ( D3D12Filter >> D3D12_MIP_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK );
}

pragma( inline, true ) auto D3D12_DECODE_FILTER_REDUCTION( T )( T D3D12Filter )
{
	return cast( D3D12_FILTER_REDUCTION_TYPE )( ( D3D12Filter >> D3D12_FILTER_REDUCTION_TYPE_SHIFT ) & D3D12_FILTER_REDUCTION_TYPE_MASK );
}

pragma( inline, true ) auto D3D12_DECODE_IS_COMPARISON_FILTER( T )( T D3D12Filter )
{
	return D3D12_DECODE_FILTER_REDUCTION( D3D12Filter ) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON;
}

pragma( inline, true ) auto D3D12_DECODE_IS_ANISOTROPIC_FILTER( T )( T  D3D12Filter )
{
	return	cast( bool )( ( D3D12Filter ) & D3D12_ANISOTROPIC_FILTERING_BIT )
			&& D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER( D3D12Filter )
			&& D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER( D3D12Filter )
			&& D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER( D3D12Filter );
}

enum D3D12_TEXTURE_ADDRESS_MODE
{
	D3D12_TEXTURE_ADDRESS_MODE_WRAP	= 1,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR	= 2,
	D3D12_TEXTURE_ADDRESS_MODE_CLAMP	= 3,
	D3D12_TEXTURE_ADDRESS_MODE_BORDER	= 4,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE	= 5
}

struct D3D12_SAMPLER_DESC
{
	D3D12_FILTER Filter;
	D3D12_TEXTURE_ADDRESS_MODE AddressU;
	D3D12_TEXTURE_ADDRESS_MODE AddressV;
	D3D12_TEXTURE_ADDRESS_MODE AddressW;
	FLOAT MipLODBias;
	UINT MaxAnisotropy;
	D3D12_COMPARISON_FUNC ComparisonFunc;
	FLOAT[ 4 ] BorderColor;
	FLOAT MinLOD;
	FLOAT MaxLOD;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_BUFFER_UAV_FLAGS
{
	D3D12_BUFFER_UAV_FLAG_NONE	= 0,
	D3D12_BUFFER_UAV_FLAG_RAW	= 0x1
}

struct D3D12_BUFFER_UAV
{
	UINT64 FirstElement;
	UINT NumElements;
	UINT StructureByteStride;
	UINT64 CounterOffsetInBytes;
	D3D12_BUFFER_UAV_FLAGS Flags;
}

struct D3D12_TEX1D_UAV
{
	UINT MipSlice;
}

struct D3D12_TEX1D_ARRAY_UAV
{
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D12_TEX2D_UAV
{
	UINT MipSlice;
	UINT PlaneSlice;
}

struct D3D12_TEX2D_ARRAY_UAV
{
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
	UINT PlaneSlice;
}

struct D3D12_TEX3D_UAV
{
	UINT MipSlice;
	UINT FirstWSlice;
	UINT WSize;
}

enum D3D12_UAV_DIMENSION
{
	D3D12_UAV_DIMENSION_UNKNOWN	= 0,
	D3D12_UAV_DIMENSION_BUFFER	= 1,
	D3D12_UAV_DIMENSION_TEXTURE1D	= 2,
	D3D12_UAV_DIMENSION_TEXTURE1DARRAY	= 3,
	D3D12_UAV_DIMENSION_TEXTURE2D	= 4,
	D3D12_UAV_DIMENSION_TEXTURE2DARRAY	= 5,
	D3D12_UAV_DIMENSION_TEXTURE3D	= 8
}

struct D3D12_UNORDERED_ACCESS_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_UAV_DIMENSION ViewDimension;
	union 
	{
		D3D12_BUFFER_UAV Buffer;
		D3D12_TEX1D_UAV Texture1D;
		D3D12_TEX1D_ARRAY_UAV Texture1DArray;
		D3D12_TEX2D_UAV Texture2D;
		D3D12_TEX2D_ARRAY_UAV Texture2DArray;
		D3D12_TEX3D_UAV Texture3D;
	}
}

struct D3D12_BUFFER_RTV
{
	UINT64 FirstElement;
	UINT NumElements;
}

struct D3D12_TEX1D_RTV
{
	UINT MipSlice;
}

struct D3D12_TEX1D_ARRAY_RTV
{
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D12_TEX2D_RTV
{
	UINT MipSlice;
	UINT PlaneSlice;
}

struct D3D12_TEX2DMS_RTV
{
	UINT UnusedField_NothingToDefine;
}

struct D3D12_TEX2D_ARRAY_RTV
{
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
	UINT PlaneSlice;
}

struct D3D12_TEX2DMS_ARRAY_RTV
{
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D12_TEX3D_RTV
{
	UINT MipSlice;
	UINT FirstWSlice;
	UINT WSize;
}


enum D3D12_RTV_DIMENSION
{
	D3D12_RTV_DIMENSION_UNKNOWN	= 0,
	D3D12_RTV_DIMENSION_BUFFER	= 1,
	D3D12_RTV_DIMENSION_TEXTURE1D	= 2,
	D3D12_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
	D3D12_RTV_DIMENSION_TEXTURE2D	= 4,
	D3D12_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
	D3D12_RTV_DIMENSION_TEXTURE2DMS	= 6,
	D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
	D3D12_RTV_DIMENSION_TEXTURE3D	= 8
}

struct D3D12_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_RTV_DIMENSION ViewDimension;
	union 
	{
		D3D12_BUFFER_RTV Buffer;
		D3D12_TEX1D_RTV Texture1D;
		D3D12_TEX1D_ARRAY_RTV Texture1DArray;
		D3D12_TEX2D_RTV Texture2D;
		D3D12_TEX2D_ARRAY_RTV Texture2DArray;
		D3D12_TEX2DMS_RTV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
		D3D12_TEX3D_RTV Texture3D;
	}
}

struct D3D12_TEX1D_DSV
{
	UINT MipSlice;
}

struct D3D12_TEX1D_ARRAY_DSV
{
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D12_TEX2D_DSV
{
	UINT MipSlice;
}

struct D3D12_TEX2D_ARRAY_DSV
{
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D12_TEX2DMS_DSV
{
	UINT UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_DSV
{
	UINT FirstArraySlice;
	UINT ArraySize;
}


@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_DSV_FLAGS
{
	D3D12_DSV_FLAG_NONE	= 0,
	D3D12_DSV_FLAG_READ_ONLY_DEPTH	= 0x1,
	D3D12_DSV_FLAG_READ_ONLY_STENCIL	= 0x2
}

enum D3D12_DSV_DIMENSION
{
	D3D12_DSV_DIMENSION_UNKNOWN	= 0,
	D3D12_DSV_DIMENSION_TEXTURE1D	= 1,
	D3D12_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
	D3D12_DSV_DIMENSION_TEXTURE2D	= 3,
	D3D12_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
	D3D12_DSV_DIMENSION_TEXTURE2DMS	= 5,
	D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6
}

struct D3D12_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_DSV_DIMENSION ViewDimension;
	D3D12_DSV_FLAGS Flags;
	union 
	{
		D3D12_TEX1D_DSV Texture1D;
		D3D12_TEX1D_ARRAY_DSV Texture1DArray;
		D3D12_TEX2D_DSV Texture2D;
		D3D12_TEX2D_ARRAY_DSV Texture2DArray;
		D3D12_TEX2DMS_DSV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
	}
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_CLEAR_FLAGS
{
	D3D12_CLEAR_FLAG_DEPTH	= 0x1,
	D3D12_CLEAR_FLAG_STENCIL	= 0x2
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_FENCE_FLAGS
{
	D3D12_FENCE_FLAG_NONE	= 0,
	D3D12_FENCE_FLAG_SHARED	= 0x1,
	D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER	= 0x2,
	D3D12_FENCE_FLAG_NON_MONITORED	= 0x4
}

enum D3D12_DESCRIPTOR_HEAP_TYPE
{
	D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV	= 0,
	D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER	= ( D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1 ) ,
	D3D12_DESCRIPTOR_HEAP_TYPE_RTV	= ( D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1 ) ,
	D3D12_DESCRIPTOR_HEAP_TYPE_DSV	= ( D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1 ) ,
	D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES	= ( D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1 ) 
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_DESCRIPTOR_HEAP_FLAGS
{
	D3D12_DESCRIPTOR_HEAP_FLAG_NONE	= 0,
	D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE	= 0x1
}

struct D3D12_DESCRIPTOR_HEAP_DESC
{
	D3D12_DESCRIPTOR_HEAP_TYPE Type;
	UINT NumDescriptors;
	D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
	UINT NodeMask;
}


enum D3D12_DESCRIPTOR_RANGE_TYPE
{
	D3D12_DESCRIPTOR_RANGE_TYPE_SRV	= 0,
	D3D12_DESCRIPTOR_RANGE_TYPE_UAV	= ( D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1 ) ,
	D3D12_DESCRIPTOR_RANGE_TYPE_CBV	= ( D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1 ) ,
	D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER	= ( D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1 ) 
}

struct D3D12_DESCRIPTOR_RANGE
{
	D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
	UINT NumDescriptors;
	UINT BaseShaderRegister;
	UINT RegisterSpace;
	UINT OffsetInDescriptorsFromTableStart;
}

struct D3D12_ROOT_DESCRIPTOR_TABLE
{
	UINT NumDescriptorRanges;
	@_Field_size_full_!(NumDescriptorRanges)
	const D3D12_DESCRIPTOR_RANGE *pDescriptorRanges;
}

struct D3D12_ROOT_CONSTANTS
{
	UINT ShaderRegister;
	UINT RegisterSpace;
	UINT Num32BitValues;
}

struct D3D12_ROOT_DESCRIPTOR
{
	UINT ShaderRegister;
	UINT RegisterSpace;
}


enum D3D12_SHADER_VISIBILITY
{
	D3D12_SHADER_VISIBILITY_ALL	= 0,
	D3D12_SHADER_VISIBILITY_VERTEX	= 1,
	D3D12_SHADER_VISIBILITY_HULL	= 2,
	D3D12_SHADER_VISIBILITY_DOMAIN	= 3,
	D3D12_SHADER_VISIBILITY_GEOMETRY	= 4,
	D3D12_SHADER_VISIBILITY_PIXEL	= 5
}


enum D3D12_ROOT_PARAMETER_TYPE
{
	D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE	= 0,
	D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS	= ( D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1 ) ,
	D3D12_ROOT_PARAMETER_TYPE_CBV	= ( D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1 ) ,
	D3D12_ROOT_PARAMETER_TYPE_SRV	= ( D3D12_ROOT_PARAMETER_TYPE_CBV + 1 ) ,
	D3D12_ROOT_PARAMETER_TYPE_UAV	= ( D3D12_ROOT_PARAMETER_TYPE_SRV + 1 ) 
}

struct D3D12_ROOT_PARAMETER
	{
	D3D12_ROOT_PARAMETER_TYPE ParameterType;
	union
	{
		D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
		D3D12_ROOT_CONSTANTS Constants;
		D3D12_ROOT_DESCRIPTOR Descriptor;
	}
	D3D12_SHADER_VISIBILITY ShaderVisibility;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_ROOT_SIGNATURE_FLAGS
{
	D3D12_ROOT_SIGNATURE_FLAG_NONE	= 0,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT	= 0x1,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS	= 0x2,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS	= 0x4,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS	= 0x8,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS	= 0x10,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS	= 0x20,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT	= 0x40
}

enum D3D12_STATIC_BORDER_COLOR
{
	D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK	= 0,
	D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK	= ( D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1 ) ,
	D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE	= ( D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK + 1 ) 
}

struct D3D12_STATIC_SAMPLER_DESC
{
	D3D12_FILTER Filter;
	D3D12_TEXTURE_ADDRESS_MODE AddressU;
	D3D12_TEXTURE_ADDRESS_MODE AddressV;
	D3D12_TEXTURE_ADDRESS_MODE AddressW;
	FLOAT MipLODBias;
	UINT MaxAnisotropy;
	D3D12_COMPARISON_FUNC ComparisonFunc;
	D3D12_STATIC_BORDER_COLOR BorderColor;
	FLOAT MinLOD;
	FLOAT MaxLOD;
	UINT ShaderRegister;
	UINT RegisterSpace;
	D3D12_SHADER_VISIBILITY ShaderVisibility;
}

struct D3D12_ROOT_SIGNATURE_DESC
{
	UINT NumParameters;
	@_Field_size_full_!(NumParameters)
	const D3D12_ROOT_PARAMETER *pParameters;
	UINT NumStaticSamplers;
	@_Field_size_full_!(NumStaticSamplers)
	const D3D12_STATIC_SAMPLER_DESC *pStaticSamplers;
	D3D12_ROOT_SIGNATURE_FLAGS Flags;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_DESCRIPTOR_RANGE_FLAGS
{
	D3D12_DESCRIPTOR_RANGE_FLAG_NONE	= 0,
	D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE	= 0x1,
	D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE	= 0x2,
	D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE	= 0x4,
	D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC	= 0x8
}

struct D3D12_DESCRIPTOR_RANGE1
{
	D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
	UINT NumDescriptors;
	UINT BaseShaderRegister;
	UINT RegisterSpace;
	D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
	UINT OffsetInDescriptorsFromTableStart;
}

struct D3D12_ROOT_DESCRIPTOR_TABLE1
{
	UINT NumDescriptorRanges;
	@_Field_size_full_!(NumDescriptorRanges)
	const D3D12_DESCRIPTOR_RANGE1 *pDescriptorRanges;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_ROOT_DESCRIPTOR_FLAGS
{
	D3D12_ROOT_DESCRIPTOR_FLAG_NONE	= 0,
	D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE	= 0x2,
	D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE	= 0x4,
	D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC	= 0x8
}

struct D3D12_ROOT_DESCRIPTOR1
{
	UINT ShaderRegister;
	UINT RegisterSpace;
	D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
}

struct D3D12_ROOT_PARAMETER1
{
	D3D12_ROOT_PARAMETER_TYPE ParameterType;
	union
	{
		D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;
		D3D12_ROOT_CONSTANTS Constants;
		D3D12_ROOT_DESCRIPTOR1 Descriptor;
	}
	D3D12_SHADER_VISIBILITY ShaderVisibility;
}

struct D3D12_ROOT_SIGNATURE_DESC1
{
	UINT NumParameters;
	@_Field_size_full_!(NumParameters)
	const D3D12_ROOT_PARAMETER1 *pParameters;
	UINT NumStaticSamplers;
	@_Field_size_full_!(NumStaticSamplers)
	const D3D12_STATIC_SAMPLER_DESC *pStaticSamplers;
	D3D12_ROOT_SIGNATURE_FLAGS Flags;
}

struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
{
	D3D_ROOT_SIGNATURE_VERSION Version;
	union 
	{
		D3D12_ROOT_SIGNATURE_DESC Desc_1_0;
		D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
	}
}

extern( C ) extern const IID IID_ID3D12RootSignatureDeserializer;
@MIDL_INTERFACE!("34AB647B-3CC8-46AC-841B-C0965645C046")
interface ID3D12RootSignatureDeserializer : IUnknown
{
public:
	const D3D12_ROOT_SIGNATURE_DESC *GetRootSignatureDesc();
}

extern( C ) extern const IID IID_ID3D12VersionedRootSignatureDeserializer;
@MIDL_INTERFACE!("7F91CE67-090C-4BB7-B78E-ED8FF2E31DA0")
interface ID3D12VersionedRootSignatureDeserializer : IUnknown
{
public:
	HRESULT GetRootSignatureDescAtVersion( 
		D3D_ROOT_SIGNATURE_VERSION convertToVersion,
		const D3D12_VERSIONED_ROOT_SIGNATURE_DESC **ppDesc);

	const D3D12_VERSIONED_ROOT_SIGNATURE_DESC *GetUnconvertedRootSignatureDesc();
}

HRESULT D3D12SerializeRootSignature(
                            const D3D12_ROOT_SIGNATURE_DESC* pRootSignature,
                            D3D_ROOT_SIGNATURE_VERSION Version,
                            ID3DBlob* ppBlob,
                            ID3DBlob* ppErrorBlob);

HRESULT D3D12CreateRootSignatureDeserializer(
                                     LPCVOID pSrcData,
                                     SIZE_T SrcDataSizeInBytes,
                                     REFIID pRootSignatureDeserializerInterface,
                                     void** ppRootSignatureDeserializer);

HRESULT D3D12SerializeVersionedRootSignature(
                            const D3D12_VERSIONED_ROOT_SIGNATURE_DESC* pRootSignature,
                            ID3DBlob* ppBlob,
                            ID3DBlob* ppErrorBlob);

HRESULT D3D12CreateVersionedRootSignatureDeserializer(
                                     LPCVOID pSrcData,
                                     SIZE_T SrcDataSizeInBytes,
                                     REFIID pRootSignatureDeserializerInterface,
                                     void** ppRootSignatureDeserializer);

struct D3D12_CPU_DESCRIPTOR_HANDLE
{
	SIZE_T ptr;
}

struct D3D12_GPU_DESCRIPTOR_HANDLE
{
	UINT64 ptr;
}

// If rects are supplied in D3D12_DISCARD_REGION, below, the resource 
// must have 2D subresources with all specified subresources the same dimension.
struct D3D12_DISCARD_REGION
{
	UINT NumRects;
	@_In_reads_!(NumRects)
	const D3D12_RECT *pRects;
	UINT FirstSubresource;
	UINT NumSubresources;
}

enum D3D12_QUERY_HEAP_TYPE
{
	D3D12_QUERY_HEAP_TYPE_OCCLUSION	= 0,
	D3D12_QUERY_HEAP_TYPE_TIMESTAMP	= 1,
	D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS	= 2,
	D3D12_QUERY_HEAP_TYPE_SO_STATISTICS	= 3,
	D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS	= 4,
	D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP	= 5
}

struct D3D12_QUERY_HEAP_DESC
{
	D3D12_QUERY_HEAP_TYPE Type;
	UINT Count;
	UINT NodeMask;
}


enum D3D12_QUERY_TYPE
{
	D3D12_QUERY_TYPE_OCCLUSION	= 0,
	D3D12_QUERY_TYPE_BINARY_OCCLUSION	= 1,
	D3D12_QUERY_TYPE_TIMESTAMP	= 2,
	D3D12_QUERY_TYPE_PIPELINE_STATISTICS	= 3,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0	= 4,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1	= 5,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2	= 6,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3	= 7,
	D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS	= 8
}


enum D3D12_PREDICATION_OP
{
	D3D12_PREDICATION_OP_EQUAL_ZERO	= 0,
	D3D12_PREDICATION_OP_NOT_EQUAL_ZERO	= 1
}

struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
{
	UINT64 IAVertices;
	UINT64 IAPrimitives;
	UINT64 VSInvocations;
	UINT64 GSInvocations;
	UINT64 GSPrimitives;
	UINT64 CInvocations;
	UINT64 CPrimitives;
	UINT64 PSInvocations;
	UINT64 HSInvocations;
	UINT64 DSInvocations;
	UINT64 CSInvocations;
}

struct D3D12_QUERY_DATA_SO_STATISTICS
{
	UINT64 NumPrimitivesWritten;
	UINT64 PrimitivesStorageNeeded;
}

struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	UINT64 SizeInBytes;
	D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
}

struct D3D12_DRAW_ARGUMENTS
{
	UINT VertexCountPerInstance;
	UINT InstanceCount;
	UINT StartVertexLocation;
	UINT StartInstanceLocation;
}

struct D3D12_DRAW_INDEXED_ARGUMENTS
{
	UINT IndexCountPerInstance;
	UINT InstanceCount;
	UINT StartIndexLocation;
	INT BaseVertexLocation;
	UINT StartInstanceLocation;
}

struct D3D12_DISPATCH_ARGUMENTS
{
	UINT ThreadGroupCountX;
	UINT ThreadGroupCountY;
	UINT ThreadGroupCountZ;
}

struct D3D12_VERTEX_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	UINT SizeInBytes;
	UINT StrideInBytes;
}

struct D3D12_INDEX_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	UINT SizeInBytes;
	DXGI_FORMAT Format;
}


enum D3D12_INDIRECT_ARGUMENT_TYPE
{
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW	= 0,
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED	= ( D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1 ) ,
	D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH	= ( D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1 ) ,
	D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1 ) ,
	D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1 ) ,
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT	= ( D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1 ) ,
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1 ) ,
	D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1 ) ,
	D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1 ) 
}

struct D3D12_INDIRECT_ARGUMENT_DESC
{
	struct VBStruct
	{
		UINT Slot;
	}
	struct CStruct
	{
		UINT RootParameterIndex;
		UINT DestOffsetIn32BitValues;
		UINT Num32BitValuesToSet;
	}

	struct CBVStruct
	{
		UINT RootParameterIndex;
	}

	struct SRVStruct
	{
		UINT RootParameterIndex;
	}

	struct UAVStruct
	{
		UINT RootParameterIndex;
	}

	D3D12_INDIRECT_ARGUMENT_TYPE Type;
	union 
	{
		VBStruct VertexBuffer;
		CStruct Constant;
		CBVStruct ConstantBufferView;
		SRVStruct ShaderResourceView;
		UAVStruct UnorderedAccessView;
	}
}

struct D3D12_COMMAND_SIGNATURE_DESC
{
	UINT ByteStride;
	UINT NumArgumentDescs;
	@_Field_size_full_!(NumArgumentDescs)
	const D3D12_INDIRECT_ARGUMENT_DESC *pArgumentDescs;
	UINT NodeMask;
}


extern( C ) extern const IID IID_ID3D12Pageable;
@MIDL_INTERFACE!("63ee58fb-1268-4835-86da-f008ce62f0d6")
interface ID3D12Pageable : ID3D12DeviceChild
{
public:
}

extern( C ) extern const IID IID_ID3D12Heap;
@MIDL_INTERFACE!("6b3b2502-6e51-45b3-90ee-9884265e8df3")
interface ID3D12Heap : ID3D12Pageable
{
public:
	D3D12_HEAP_DESC GetDesc();
}

extern( C ) extern const IID IID_ID3D12Resource;
@MIDL_INTERFACE!("696442be-a72e-4059-bc79-5b5c98040fad")
interface ID3D12Resource : ID3D12Pageable
{
public:
	HRESULT Map( 
		UINT Subresource,
		const D3D12_RANGE *pReadRange,
		void **ppData);

	void Unmap( 
		UINT Subresource,
		const D3D12_RANGE *pWrittenRange);

	D3D12_RESOURCE_DESC GetDesc();

	D3D12_GPU_VIRTUAL_ADDRESS GetGPUVirtualAddress();

	HRESULT WriteToSubresource( 
		UINT DstSubresource,
		const D3D12_BOX *pDstBox,
		const void *pSrcData,
		UINT SrcRowPitch,
		UINT SrcDepthPitch);

	HRESULT ReadFromSubresource( 
		void *pDstData,
		UINT DstRowPitch,
		UINT DstDepthPitch,
		UINT SrcSubresource,
		const D3D12_BOX *pSrcBox);

	HRESULT GetHeapProperties( 
		D3D12_HEAP_PROPERTIES *pHeapProperties,
		D3D12_HEAP_FLAGS *pHeapFlags);
}

extern( C ) extern const IID IID_ID3D12CommandAllocator;
@MIDL_INTERFACE!("6102dee4-af59-4b09-b999-b44d73f09b24")
interface ID3D12CommandAllocator : ID3D12Pageable
{
public:
	HRESULT Reset();
}

extern( C ) extern const IID IID_ID3D12Fence;
@MIDL_INTERFACE!("0a753dcf-c4d8-4b91-adf6-be5a60d95a76")
interface ID3D12Fence : ID3D12Pageable
{
public:
	UINT64 GetCompletedValue();

	HRESULT SetEventOnCompletion( 
		UINT64 Value,
		HANDLE hEvent);

	HRESULT Signal( 
		UINT64 Value);
}

extern( C ) extern const IID IID_ID3D12Fence1;
@MIDL_INTERFACE!("433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a")
interface ID3D12Fence1 : ID3D12Fence
{
public:
	D3D12_FENCE_FLAGS GetCreationFlags();
}

extern( C ) extern const IID IID_ID3D12PipelineState;
@MIDL_INTERFACE!("765a30f3-f624-4c6f-a828-ace948622445")
interface ID3D12PipelineState : ID3D12Pageable
{
public:
	HRESULT GetCachedBlob( 
		ID3DBlob *ppBlob);
}

extern( C ) extern const IID IID_ID3D12DescriptorHeap;
@MIDL_INTERFACE!("8efb471d-616c-4f49-90f7-127bb763fa51")
interface ID3D12DescriptorHeap : ID3D12Pageable
{
public:
	D3D12_DESCRIPTOR_HEAP_DESC GetDesc();

	D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart();

	D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart();
}

extern( C ) extern const IID IID_ID3D12QueryHeap;
@MIDL_INTERFACE!("0d9658ae-ed45-469e-a61d-970ec583cab4")
interface ID3D12QueryHeap : ID3D12Pageable
{
public:
}

extern( C ) extern const IID IID_ID3D12CommandSignature;
@MIDL_INTERFACE!("c36a797c-ec80-4f0a-8985-a7b2475082d1")
interface ID3D12CommandSignature : ID3D12Pageable
{
public:
}

extern( C ) extern const IID IID_ID3D12CommandList;
@MIDL_INTERFACE!("7116d91c-e7e4-47ce-b8c6-ec8168f437e5")
interface ID3D12CommandList : ID3D12DeviceChild
{
public:
	D3D12_COMMAND_LIST_TYPE GetType();
}

extern( C ) extern const IID IID_ID3D12GraphicsCommandList;
@MIDL_INTERFACE!("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455")
interface ID3D12GraphicsCommandList : ID3D12CommandList
{
public:
	HRESULT Close();

	HRESULT Reset( 
		ID3D12CommandAllocator pAllocator,
		ID3D12PipelineState pInitialState);

	void ClearState( 
		ID3D12PipelineState pPipelineState);

	void DrawInstanced( 
		UINT VertexCountPerInstance,
		UINT InstanceCount,
		UINT StartVertexLocation,
		UINT StartInstanceLocation);

	void DrawIndexedInstanced( 
		UINT IndexCountPerInstance,
		UINT InstanceCount,
		UINT StartIndexLocation,
		INT BaseVertexLocation,
		UINT StartInstanceLocation);

	void Dispatch( 
		UINT ThreadGroupCountX,
		UINT ThreadGroupCountY,
		UINT ThreadGroupCountZ);

	void CopyBufferRegion( 
		ID3D12Resource pDstBuffer,
		UINT64 DstOffset,
		ID3D12Resource pSrcBuffer,
		UINT64 SrcOffset,
		UINT64 NumBytes);

	void CopyTextureRegion( 
		const D3D12_TEXTURE_COPY_LOCATION *pDst,
		UINT DstX,
		UINT DstY,
		UINT DstZ,
		const D3D12_TEXTURE_COPY_LOCATION *pSrc,
		const D3D12_BOX *pSrcBox);

	void CopyResource( 
		ID3D12Resource pDstResource,
		ID3D12Resource pSrcResource);

	void CopyTiles( 
		ID3D12Resource pTiledResource,
		const D3D12_TILED_RESOURCE_COORDINATE *pTileRegionStartCoordinate,
		const D3D12_TILE_REGION_SIZE *pTileRegionSize,
		ID3D12Resource pBuffer,
		UINT64 BufferStartOffsetInBytes,
		D3D12_TILE_COPY_FLAGS Flags);

	void ResolveSubresource( 
		ID3D12Resource pDstResource,
		UINT DstSubresource,
		ID3D12Resource pSrcResource,
		UINT SrcSubresource,
		DXGI_FORMAT Format);

	void IASetPrimitiveTopology( 
		D3D12_PRIMITIVE_TOPOLOGY PrimitiveTopology);

	void RSSetViewports( 
		UINT NumViewports,
		const D3D12_VIEWPORT *pViewports);

	void RSSetScissorRects( 
		UINT NumRects,
		const D3D12_RECT *pRects);

	void OMSetBlendFactor( 
		const FLOAT[ 4 ] BlendFactor);

	void OMSetStencilRef( 
		UINT StencilRef);

	void SetPipelineState( 
		ID3D12PipelineState pPipelineState);

	void ResourceBarrier( 
		UINT NumBarriers,
		const D3D12_RESOURCE_BARRIER *pBarriers);

	void ExecuteBundle( 
		ID3D12GraphicsCommandList pCommandList);

	void SetDescriptorHeaps( 
		UINT NumDescriptorHeaps,
		ID3D12DescriptorHeap /+* const+/ *ppDescriptorHeaps);

	void SetComputeRootSignature( 
		ID3D12RootSignature pRootSignature);

	void SetGraphicsRootSignature( 
		ID3D12RootSignature pRootSignature);

	void SetComputeRootDescriptorTable( 
		UINT RootParameterIndex,
		D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

	void SetGraphicsRootDescriptorTable( 
		UINT RootParameterIndex,
		D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

	void SetComputeRoot32BitConstant( 
		UINT RootParameterIndex,
		UINT SrcData,
		UINT DestOffsetIn32BitValues);

	void SetGraphicsRoot32BitConstant( 
		UINT RootParameterIndex,
		UINT SrcData,
		UINT DestOffsetIn32BitValues);

	void SetComputeRoot32BitConstants( 
		UINT RootParameterIndex,
		UINT Num32BitValuesToSet,
		const void *pSrcData,
		UINT DestOffsetIn32BitValues);

	void SetGraphicsRoot32BitConstants( 
		UINT RootParameterIndex,
		UINT Num32BitValuesToSet,
		const void *pSrcData,
		UINT DestOffsetIn32BitValues);

	void SetComputeRootConstantBufferView( 
		UINT RootParameterIndex,
		D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

	void SetGraphicsRootConstantBufferView( 
		UINT RootParameterIndex,
		D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

	void SetComputeRootShaderResourceView( 
		UINT RootParameterIndex,
		D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

	void SetGraphicsRootShaderResourceView( 
		UINT RootParameterIndex,
		D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

	void SetComputeRootUnorderedAccessView( 
		UINT RootParameterIndex,
		D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

	void SetGraphicsRootUnorderedAccessView( 
		UINT RootParameterIndex,
		D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

	void IASetIndexBuffer( 
		const D3D12_INDEX_BUFFER_VIEW *pView);

	void IASetVertexBuffers( 
		UINT StartSlot,
		UINT NumViews,
		const D3D12_VERTEX_BUFFER_VIEW *pViews);

	void SOSetTargets( 
		UINT StartSlot,
		UINT NumViews,
		const D3D12_STREAM_OUTPUT_BUFFER_VIEW *pViews);

	void OMSetRenderTargets( 
		UINT NumRenderTargetDescriptors,
		const D3D12_CPU_DESCRIPTOR_HANDLE *pRenderTargetDescriptors,
		BOOL RTsSingleHandleToDescriptorRange,
		const D3D12_CPU_DESCRIPTOR_HANDLE *pDepthStencilDescriptor);

	void ClearDepthStencilView( 
		D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView,
		D3D12_CLEAR_FLAGS ClearFlags,
		FLOAT Depth,
		UINT8 Stencil,
		UINT NumRects,
		const D3D12_RECT *pRects);

	void ClearRenderTargetView( 
		D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView,
		const FLOAT[ 4 ] ColorRGBA,
		UINT NumRects,
		const D3D12_RECT *pRects);

	void ClearUnorderedAccessViewUint( 
		D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
		D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
		ID3D12Resource pResource,
		const UINT[ 4 ] Values,
		UINT NumRects,
		const D3D12_RECT *pRects);

	void ClearUnorderedAccessViewFloat( 
		D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
		D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
		ID3D12Resource pResource,
		const FLOAT[ 4 ] Values,
		UINT NumRects,
		const D3D12_RECT *pRects);

	void DiscardResource( 
		ID3D12Resource pResource,
		const D3D12_DISCARD_REGION *pRegion);

	void BeginQuery( 
		ID3D12QueryHeap pQueryHeap,
		D3D12_QUERY_TYPE Type,
		UINT Index);

	void EndQuery( 
		ID3D12QueryHeap pQueryHeap,
		D3D12_QUERY_TYPE Type,
		UINT Index);

	void ResolveQueryData( 
		ID3D12QueryHeap pQueryHeap,
		D3D12_QUERY_TYPE Type,
		UINT StartIndex,
		UINT NumQueries,
		ID3D12Resource pDestinationBuffer,
		UINT64 AlignedDestinationBufferOffset);

	void SetPredication( 
		ID3D12Resource pBuffer,
		UINT64 AlignedBufferOffset,
		D3D12_PREDICATION_OP Operation);

	void SetMarker( 
		UINT Metadata,
		const void *pData,
		UINT Size);

	void BeginEvent( 
		UINT Metadata,
		const void *pData,
		UINT Size);

	void EndEvent();

	void ExecuteIndirect( 
		ID3D12CommandSignature pCommandSignature,
		UINT MaxCommandCount,
		ID3D12Resource pArgumentBuffer,
		UINT64 ArgumentBufferOffset,
		ID3D12Resource pCountBuffer,
		UINT64 CountBufferOffset);
}

extern( C ) extern const IID IID_ID3D12GraphicsCommandList1;
@MIDL_INTERFACE!("553103fb-1fe7-4557-bb38-946d7d0e7ca7")
interface ID3D12GraphicsCommandList1 : ID3D12GraphicsCommandList
{
public:
	void AtomicCopyBufferUINT( 
		ID3D12Resource pDstBuffer,
		UINT64 DstOffset,
		ID3D12Resource pSrcBuffer,
		UINT64 SrcOffset,
		UINT Dependencies,
		ID3D12Resource /+*const+/ *ppDependentResources,
		const D3D12_SUBRESOURCE_RANGE_UINT64 *pDependentSubresourceRanges);

	void AtomicCopyBufferUINT64( 
		ID3D12Resource pDstBuffer,
		UINT64 DstOffset,
		ID3D12Resource pSrcBuffer,
		UINT64 SrcOffset,
		UINT Dependencies,
		ID3D12Resource /+*const+/ *ppDependentResources,
		const D3D12_SUBRESOURCE_RANGE_UINT64 *pDependentSubresourceRanges);

	void OMSetDepthBounds( 
		FLOAT Min,
		FLOAT Max);

	void SetSamplePositions( 
		UINT NumSamplesPerPixel,
		UINT NumPixels,
		D3D12_SAMPLE_POSITION *pSamplePositions);

	void ResolveSubresourceRegion( 
		ID3D12Resource pDstResource,
		UINT DstSubresource,
		UINT DstX,
		UINT DstY,
		ID3D12Resource pSrcResource,
		UINT SrcSubresource,
		D3D12_RECT *pSrcRect,
		DXGI_FORMAT Format,
		D3D12_RESOLVE_MODE ResolveMode);

	void SetViewInstanceMask( 
		UINT Mask);

}

struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
{
	D3D12_GPU_VIRTUAL_ADDRESS Dest;
	UINT32 Value;
}


enum D3D12_WRITEBUFFERIMMEDIATE_MODE
{
	D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT	= 0,
	D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN	= 0x1,
	D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT	= 0x2
}


extern( C ) extern const IID IID_ID3D12GraphicsCommandList2;
@MIDL_INTERFACE!("38C3E585-FF17-412C-9150-4FC6F9D72A28")
interface ID3D12GraphicsCommandList2 : ID3D12GraphicsCommandList1
{
public:
	void WriteBufferImmediate( 
		UINT Count,
		const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *pParams,
		const D3D12_WRITEBUFFERIMMEDIATE_MODE *pModes);

}

extern( C ) extern const IID IID_ID3D12CommandQueue;
@MIDL_INTERFACE!("0ec870a6-5d7e-4c22-8cfc-5baae07616ed")
interface ID3D12CommandQueue : ID3D12Pageable
{
public:
	void UpdateTileMappings( 
		ID3D12Resource pResource,
		UINT NumResourceRegions,
		const D3D12_TILED_RESOURCE_COORDINATE *pResourceRegionStartCoordinates,
		const D3D12_TILE_REGION_SIZE *pResourceRegionSizes,
		ID3D12Heap pHeap,
		UINT NumRanges,
		const D3D12_TILE_RANGE_FLAGS *pRangeFlags,
		const UINT *pHeapRangeStartOffsets,
		const UINT *pRangeTileCounts,
		D3D12_TILE_MAPPING_FLAGS Flags);

	void CopyTileMappings( 
		ID3D12Resource pDstResource,
		const D3D12_TILED_RESOURCE_COORDINATE *pDstRegionStartCoordinate,
		ID3D12Resource pSrcResource,
		const D3D12_TILED_RESOURCE_COORDINATE *pSrcRegionStartCoordinate,
		const D3D12_TILE_REGION_SIZE *pRegionSize,
		D3D12_TILE_MAPPING_FLAGS Flags);

	void ExecuteCommandLists( 
		UINT NumCommandLists,
		ID3D12CommandList /+*const+/ *ppCommandLists);

	void SetMarker( 
		UINT Metadata,
		const void *pData,
		UINT Size);

	void BeginEvent( 
		UINT Metadata,
		const void *pData,
		UINT Size);

	void EndEvent();

	HRESULT Signal( 
		ID3D12Fence pFence,
		UINT64 Value);

	HRESULT Wait( 
		ID3D12Fence pFence,
		UINT64 Value);

	HRESULT GetTimestampFrequency( 
		UINT64 *pFrequency);

	HRESULT GetClockCalibration( 
		UINT64 *pGpuTimestamp,
		UINT64 *pCpuTimestamp);

	D3D12_COMMAND_QUEUE_DESC GetDesc();

}

extern( C ) extern const IID IID_ID3D12Device;
@MIDL_INTERFACE!("189819f1-1db6-4b57-be54-1821339b85f7")
interface ID3D12Device : ID3D12Object
{
public:
	UINT GetNodeCount();

	HRESULT CreateCommandQueue( 
		const D3D12_COMMAND_QUEUE_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppCommandQueue);

	HRESULT CreateCommandAllocator( 
		D3D12_COMMAND_LIST_TYPE type,
		REFIID riid,
		@_COM_Outptr_ void **ppCommandAllocator);

	HRESULT CreateGraphicsPipelineState( 
		const D3D12_GRAPHICS_PIPELINE_STATE_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppPipelineState);

	HRESULT CreateComputePipelineState( 
		const D3D12_COMPUTE_PIPELINE_STATE_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppPipelineState);

	HRESULT CreateCommandList( 
		UINT nodeMask,
		D3D12_COMMAND_LIST_TYPE type,
		ID3D12CommandAllocator pCommandAllocator,
		ID3D12PipelineState pInitialState,
		REFIID riid,
		@_COM_Outptr_ void **ppCommandList);

	HRESULT CheckFeatureSupport( 
		D3D12_FEATURE Feature,
		void *pFeatureSupportData,
		UINT FeatureSupportDataSize);

	HRESULT CreateDescriptorHeap( 
		const D3D12_DESCRIPTOR_HEAP_DESC *pDescriptorHeapDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppvHeap);

	UINT GetDescriptorHandleIncrementSize( 
		D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

	HRESULT CreateRootSignature( 
		UINT nodeMask,
		const void *pBlobWithRootSignature,
		SIZE_T blobLengthInBytes,
		REFIID riid,
		@_COM_Outptr_ void **ppvRootSignature);

	void CreateConstantBufferView( 
		const D3D12_CONSTANT_BUFFER_VIEW_DESC *pDesc,
		D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

	void CreateShaderResourceView( 
		ID3D12Resource pResource,
		const D3D12_SHADER_RESOURCE_VIEW_DESC *pDesc,
		D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

	void CreateUnorderedAccessView( 
		ID3D12Resource pResource,
		ID3D12Resource pCounterResource,
		const D3D12_UNORDERED_ACCESS_VIEW_DESC *pDesc,
		D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

	void CreateRenderTargetView( 
		ID3D12Resource pResource,
		const D3D12_RENDER_TARGET_VIEW_DESC *pDesc,
		D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

	void CreateDepthStencilView( 
		ID3D12Resource pResource,
		const D3D12_DEPTH_STENCIL_VIEW_DESC *pDesc,
		D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

	void CreateSampler( 
		const D3D12_SAMPLER_DESC *pDesc,
		D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

	void CopyDescriptors( 
		UINT NumDestDescriptorRanges,
		const D3D12_CPU_DESCRIPTOR_HANDLE *pDestDescriptorRangeStarts,
		const UINT *pDestDescriptorRangeSizes,
		UINT NumSrcDescriptorRanges,
		const D3D12_CPU_DESCRIPTOR_HANDLE *pSrcDescriptorRangeStarts,
		const UINT *pSrcDescriptorRangeSizes,
		D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

	void CopyDescriptorsSimple( 
		UINT NumDescriptors,
		D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart,
		D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart,
		D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

	D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo( 
		UINT visibleMask,
		UINT numResourceDescs,
		const D3D12_RESOURCE_DESC *pResourceDescs);

	D3D12_HEAP_PROPERTIES GetCustomHeapProperties( 
		UINT nodeMask,
		D3D12_HEAP_TYPE heapType);

	HRESULT CreateCommittedResource( 
		const D3D12_HEAP_PROPERTIES *pHeapProperties,
		D3D12_HEAP_FLAGS HeapFlags,
		const D3D12_RESOURCE_DESC *pDesc,
		D3D12_RESOURCE_STATES InitialResourceState,
		const D3D12_CLEAR_VALUE *pOptimizedClearValue,
		REFIID riidResource,
		@_COM_Outptr_opt_ void **ppvResource);

	HRESULT CreateHeap( 
		const D3D12_HEAP_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvHeap);

	HRESULT CreatePlacedResource( 
		ID3D12Heap pHeap,
		UINT64 HeapOffset,
		const D3D12_RESOURCE_DESC *pDesc,
		D3D12_RESOURCE_STATES InitialState,
		const D3D12_CLEAR_VALUE *pOptimizedClearValue,
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvResource);

	HRESULT CreateReservedResource( 
		const D3D12_RESOURCE_DESC *pDesc,
		D3D12_RESOURCE_STATES InitialState,
		const D3D12_CLEAR_VALUE *pOptimizedClearValue,
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvResource);

	HRESULT CreateSharedHandle( 
		ID3D12DeviceChild pObject,
		const SECURITY_ATTRIBUTES *pAttributes,
		DWORD Access,
		LPCWSTR Name,
		HANDLE *pHandle);

	HRESULT OpenSharedHandle( 
		HANDLE NTHandle,
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvObj);

	HRESULT OpenSharedHandleByName( 
		LPCWSTR Name,
		DWORD Access,
		HANDLE *pNTHandle);

	HRESULT MakeResident( 
		UINT NumObjects,
		ID3D12Pageable /+*const+/ *ppObjects);

	HRESULT Evict( 
		UINT NumObjects,
		ID3D12Pageable /+*const+/ *ppObjects);

	HRESULT CreateFence( 
		UINT64 InitialValue,
		D3D12_FENCE_FLAGS Flags,
		REFIID riid,
		@_COM_Outptr_ void **ppFence);

	HRESULT GetDeviceRemovedReason();

	void GetCopyableFootprints( 
		const D3D12_RESOURCE_DESC *pResourceDesc,
		UINT FirstSubresource,
		UINT NumSubresources,
		UINT64 BaseOffset,
		D3D12_PLACED_SUBRESOURCE_FOOTPRINT *pLayouts,
		UINT *pNumRows,
		UINT64 *pRowSizeInBytes,
		UINT64 *pTotalBytes);

	HRESULT CreateQueryHeap( 
		const D3D12_QUERY_HEAP_DESC *pDesc,
		REFIID riid,
		void **ppvHeap);

	HRESULT SetStablePowerState( 
		BOOL Enable);

	HRESULT CreateCommandSignature( 
		const D3D12_COMMAND_SIGNATURE_DESC *pDesc,
		ID3D12RootSignature pRootSignature,
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvCommandSignature);

	void GetResourceTiling( 
		ID3D12Resource pTiledResource,
		UINT *pNumTilesForEntireResource,
		D3D12_PACKED_MIP_INFO *pPackedMipDesc,
		D3D12_TILE_SHAPE *pStandardTileShapeForNonPackedMips,
		UINT *pNumSubresourceTilings,
		UINT FirstSubresourceTilingToGet,
		D3D12_SUBRESOURCE_TILING *pSubresourceTilingsForNonPackedMips);

	LUID GetAdapterLuid();
}

extern( C ) extern const IID IID_ID3D12PipelineLibrary;
@MIDL_INTERFACE!("c64226a8-9201-46af-b4cc-53fb9ff7414f")
interface ID3D12PipelineLibrary : ID3D12DeviceChild
{
public:
	HRESULT StorePipeline( 
		LPCWSTR pName,
		ID3D12PipelineState pPipeline);

	HRESULT LoadGraphicsPipeline( 
		LPCWSTR pName,
		const D3D12_GRAPHICS_PIPELINE_STATE_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppPipelineState);

	HRESULT LoadComputePipeline( 
		LPCWSTR pName,
		const D3D12_COMPUTE_PIPELINE_STATE_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppPipelineState);

	SIZE_T GetSerializedSize();

	HRESULT Serialize( 
		void *pData,
		SIZE_T DataSizeInBytes);
}

extern( C ) extern const IID IID_ID3D12PipelineLibrary1;
@MIDL_INTERFACE!("80eabf42-2568-4e5e-bd82-c37f86961dc3")
interface ID3D12PipelineLibrary1 : ID3D12PipelineLibrary
{
public:
	HRESULT LoadPipeline( 
		LPCWSTR pName,
		const D3D12_PIPELINE_STATE_STREAM_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppPipelineState);

}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS
{
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE	= 0,
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY	= 0x1,
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL	= 0
}

enum D3D12_RESIDENCY_PRIORITY
{
	D3D12_RESIDENCY_PRIORITY_MINIMUM	= 0x28000000,
	D3D12_RESIDENCY_PRIORITY_LOW	= 0x50000000,
	D3D12_RESIDENCY_PRIORITY_NORMAL	= 0x78000000,
	D3D12_RESIDENCY_PRIORITY_HIGH	= 0xa0010000,
	D3D12_RESIDENCY_PRIORITY_MAXIMUM	= 0xc8000000
}

extern( C ) extern const IID IID_ID3D12Device1;
@MIDL_INTERFACE!("77acce80-638e-4e65-8895-c1f23386863e")
interface ID3D12Device1 : ID3D12Device
{
public:
	HRESULT CreatePipelineLibrary( 
		const void *pLibraryBlob,
		SIZE_T BlobLength,
		REFIID riid,
		@_COM_Outptr_ void **ppPipelineLibrary);

	HRESULT SetEventOnMultipleFenceCompletion( 
		ID3D12Fence /+*const+/ *ppFences,
		const UINT64 *pFenceValues,
		UINT NumFences,
		D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags,
		HANDLE hEvent);

	HRESULT SetResidencyPriority( 
		UINT NumObjects,
		ID3D12Pageable /+*const+/ *ppObjects,
		const D3D12_RESIDENCY_PRIORITY *pPriorities);
}

extern( C ) extern const IID IID_ID3D12Device2;
@MIDL_INTERFACE!("30baa41e-b15b-475c-a0bb-1af5c5b64328")
interface ID3D12Device2 : ID3D12Device1
{
public:
	HRESULT CreatePipelineState( 
		const D3D12_PIPELINE_STATE_STREAM_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppPipelineState);

}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_RESIDENCY_FLAGS
{
	D3D12_RESIDENCY_FLAG_NONE	= 0,
	D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET	= 0x1
}

extern( C ) extern const IID IID_ID3D12Device3;
@MIDL_INTERFACE!("81dadc15-2bad-4392-93c5-101345c4aa98")
interface ID3D12Device3 : ID3D12Device2
{
public:
	HRESULT OpenExistingHeapFromAddress( 
		const void *pAddress,
		REFIID riid,
		@_COM_Outptr_ void **ppvHeap);

	HRESULT OpenExistingHeapFromFileMapping( 
		HANDLE hFileMapping,
		REFIID riid,
		@_COM_Outptr_ void **ppvHeap);

	HRESULT EnqueueMakeResident( 
		D3D12_RESIDENCY_FLAGS Flags,
		UINT NumObjects,
		ID3D12Pageable /+*const+/ *ppObjects,
		ID3D12Fence pFenceToSignal,
		UINT64 FenceValueToSignal);
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_COMMAND_LIST_FLAGS
{
	D3D12_COMMAND_LIST_FLAG_NONE	= 0
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_COMMAND_POOL_FLAGS
{
	D3D12_COMMAND_POOL_FLAG_NONE	= 0
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_COMMAND_RECORDER_FLAGS
{
	D3D12_COMMAND_RECORDER_FLAG_NONE	= 0
}

enum D3D12_PROTECTED_SESSION_STATUS
{
	D3D12_PROTECTED_SESSION_STATUS_OK	= 0,
	D3D12_PROTECTED_SESSION_STATUS_INVALID	= 1
}

extern( C ) extern const IID IID_ID3D12ProtectedSession;
@MIDL_INTERFACE!("A1533D18-0AC1-4084-85B9-89A96116806B")
interface ID3D12ProtectedSession : ID3D12DeviceChild
{
public:
	HRESULT GetStatusFence( 
		REFIID riid,
		@_COM_Outptr_ void **ppFence);

	D3D12_PROTECTED_SESSION_STATUS GetSessionStatus();
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
{
	D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE	= 0,
	D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED	= 0x1
}

struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
{
	UINT NodeIndex;
	D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
}

@DEFINE_ENUM_FLAG_OPERATORS
enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
{
	D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE	= 0
}

struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
{
	UINT NodeMask;
	D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
}

extern( C ) extern const IID IID_ID3D12ProtectedResourceSession;
@MIDL_INTERFACE!("6CD696F4-F289-40CC-8091-5A6C0A099C3D")
interface ID3D12ProtectedResourceSession : ID3D12ProtectedSession
{
public:
	D3D12_PROTECTED_RESOURCE_SESSION_DESC GetDesc();
}
extern( C ) extern const IID IID_ID3D12Device4;
@MIDL_INTERFACE!("e865df17-a9ee-46f9-a463-3098315aa2e5")
interface ID3D12Device4 : ID3D12Device3
{
public:
	HRESULT CreateCommandList1( 
		UINT nodeMask,
		D3D12_COMMAND_LIST_TYPE type,
		D3D12_COMMAND_LIST_FLAGS flags,
		REFIID riid,
		@_COM_Outptr_ void **ppCommandList);

	HRESULT CreateProtectedResourceSession( 
		const D3D12_PROTECTED_RESOURCE_SESSION_DESC *pDesc,
		REFIID riid,
		@_COM_Outptr_ void **ppSession);

	HRESULT CreateCommittedResource1( 
		const D3D12_HEAP_PROPERTIES *pHeapProperties,
		D3D12_HEAP_FLAGS HeapFlags,
		const D3D12_RESOURCE_DESC *pDesc,
		D3D12_RESOURCE_STATES InitialResourceState,
		const D3D12_CLEAR_VALUE *pOptimizedClearValue,
		ID3D12ProtectedResourceSession pProtectedSession,
		REFIID riidResource,
		@_COM_Outptr_opt_ void **ppvResource);

	HRESULT CreateHeap1( 
		const D3D12_HEAP_DESC *pDesc,
		ID3D12ProtectedResourceSession pProtectedSession,
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvHeap);

	HRESULT CreateReservedResource1( 
		const D3D12_RESOURCE_DESC *pDesc,
		D3D12_RESOURCE_STATES InitialState,
		const D3D12_CLEAR_VALUE *pOptimizedClearValue,
		ID3D12ProtectedResourceSession pProtectedSession,
		REFIID riid,
		@_COM_Outptr_opt_ void **ppvResource);

	D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1( 
		UINT visibleMask,
		UINT numResourceDescs,
		const D3D12_RESOURCE_DESC *pResourceDescs,
		D3D12_RESOURCE_ALLOCATION_INFO1 *pResourceAllocationInfo1);
}

extern( C ) extern const IID IID_ID3D12Resource1;
@MIDL_INTERFACE!("9D5E227A-4430-4161-88B3-3ECA6BB16E19")
interface ID3D12Resource1 : ID3D12Resource
{
public:
	HRESULT GetProtectedResourceSession( 
		REFIID riid,
		@_COM_Outptr_opt_ void **ppProtectedSession);
}

extern( C ) extern const IID IID_ID3D12Heap1;
@MIDL_INTERFACE!("572F7389-2168-49E3-9693-D6DF5871BF6D")
interface ID3D12Heap1 : ID3D12Heap
{
public:
	HRESULT GetProtectedResourceSession( 
		REFIID riid,
		@_COM_Outptr_opt_ void **ppProtectedSession);
}

extern( C ) extern const IID IID_ID3D12GraphicsCommandList3;
@MIDL_INTERFACE!("6FDA83A7-B84C-4E38-9AC8-C7BD22016B3D")
interface ID3D12GraphicsCommandList3 : ID3D12GraphicsCommandList2
{
public:
	void SetProtectedResourceSession( 
		ID3D12ProtectedResourceSession pProtectedResourceSession);
}

extern( C ) extern const IID IID_ID3D12Tools;
@MIDL_INTERFACE!("7071e1f0-e84b-4b33-974f-12fa49de65c5")
interface ID3D12Tools : IUnknown
{
public:
	void EnableShaderInstrumentation( 
		BOOL bEnable);

	BOOL ShaderInstrumentationEnabled();

}

struct D3D12_SUBRESOURCE_DATA
{
	const void *pData;
	LONG_PTR RowPitch;
	LONG_PTR SlicePitch;
}

struct D3D12_MEMCPY_DEST
{
	void *pData;
	SIZE_T RowPitch;
	SIZE_T SlicePitch;
}

extern( Windows ) HRESULT D3D12CreateDevice(
	IUnknown pAdapter,
	D3D_FEATURE_LEVEL MinimumFeatureLevel,
	REFIID riid,
	@_COM_Outptr_opt_ void** ppDevice );

extern( Windows ) HRESULT D3D12GetDebugInterface(
	REFIID riid,
	@_COM_Outptr_opt_ void** ppvDebug );

extern( Windows ) HRESULT D3D12EnableExperimentalFeatures(
	UINT NumFeatures,
	const IID* pIIDs,
	void* pConfigurationStructs,
	UINT* pConfigurationStructSizes);

enum UUID D3D12ExperimentalShaderModels = { /* 76f5573e-f13a-40f5-b297-81ce9e18933f */
	0x76f5573e,
	0xf13a,
	0x40f5,
	[ 0xb2, 0x97, 0x81, 0xce, 0x9e, 0x18, 0x93, 0x3f ]
};

enum UUID D3D12TiledResourceTier4 = { /* c9c4725f-a81a-4f56-8c5b-c51039d694fb */
	0xc9c4725f,
	0xa81a,
	0x4f56,
	[ 0x8c, 0x5b, 0xc5, 0x10, 0x39, 0xd6, 0x94, 0xfb ]
};

enum UUID D3D12MetaCommand = { /* C734C97E-8077-48C8-9FDC-D9D1DD31DD77 */
	0xc734c97e,
	0x8077,
	0x48c8,
	[ 0x9f, 0xdc, 0xd9, 0xd1, 0xdd, 0x31, 0xdd, 0x77 ]
};

mixin( Glue!"directx.d3d12" );
